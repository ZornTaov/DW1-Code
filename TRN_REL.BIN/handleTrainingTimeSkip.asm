void handleTrainingTimeSkip(tiredness, energyCost, happinessCost) {
    store(0x138482, load(0x138482) + tiredness)
    store(0x13849C, load(0x13849C) - energyCost)
    store(0x13848A, load(0x13848A) - happinessCost)

    if(load(0x138482) > 80) { // tiredness
        store(0x13848A, load(0x13848A) - 3) // happiness
        store(0x138488, load(0x138488) - 3) // discipline
    }

    store(0x134F08, load(0x13538C) + 1200) // current frame
    store(0x134EBC, load(0x13538E) + 1) // current hour

    if(load(0x134EBC) >= 24) {
        store(0x1384AA, load(0x1384AA) + 1) // display age
        store(0x134F04, load(0x134F04) + 1) // current day
        dailyPStatTrigger()
        store(0x134EBC, load(0x134EBC) - 24) // current hour
        store(0x134F08, load(0x134F08) - 28800) // current frame

        if(load(0x134F04) > 30) { // year change
            store(0x134F02, load(0x134F02) + 1) // current year
            store(0x134F04, 0) // current day
            if(load(0x134F02) > 99) // year overflow
                store(0x134F02, 0)
        }
    }

    updateMinuteHand(load(0x134EBC), load(0x134EBE))

    if(load(0x134EBC) % 4 == 0) { // unhappiness lifetime penalty
        happiness = load(0x13848A)
        if(happiness < 80) {
            lifetimePenalty = -0.02 * (happiness - 80) + 1
            store(0x1384A8, load(0x1384A8) - lifetimePenalty)
        }
    }

    // probably day/night light transition
    if(a0 == 16) 
        0x000D7104(0)
    else if(a0 == 20)
        0x000D7104(1)
    else if(a0 == 6)
        0x000D7104(2)

    flags = load(0x138460)
    digimonId = load(0x1557A8)

    if(flags & 1 != 0) {
        store(0x138472, load(0x138472) + 1)
        store(0x138474, load(0x138474) + 1)
    }
    
    if(flags & 4 != 0) { // is hungry
        store(0x1384A0, load(0x1384A0) - 120) // hunger timer

        if(load(0x1384A0) <= 0) 
            if(load(0x13849C) < load(0x1225C5 + digimonId * 28)) // energy level below threshold
                store(0x1384B2, load(0x1384B2) + 1) // care mistake
    }
    else 
        store(0x13849E, load(0x13849E) - 60) // hungry timer

    store(0x13849C, load(0x13849C) - load(0x1225C6 + digimonId * 28)) // energy usage
    
    if(flags & 8 != 0)
        store(0x138480, load(0x138480) - 1200) // poop timer
    else
        store(0x134878, load(0x134878) - 6) // next poop timer

    store(0x1384A8, load(0x1384A8) - 1) // lifetime
    store(0x1384B6, load(0x1384B6) + 1) // evolve timer

    if(load(0x1384A8) < 0) // lifetime < 0
        store(0x1384A8, 0)
    
    if(flags & 0x20 != 0) // is injured
        store(0x138498, load(0x138498) + 1)
    if(flags & 0x40 != 0) // is sick
        store(0x138496, load(0x138496) + 1)

    tickConditionBoundaries()
}

0x0008a284 lui asmTemp,0x8014
0x0008a288 lh v0,-0x7b7e(asmTemp)
0x0008a28c addiu sp,sp,0xffe8
0x0008a290 add v0,v0,a0
0x0008a294 lui asmTemp,0x8014
0x0008a298 sh v0,-0x7b7e(asmTemp)
0x0008a29c lui asmTemp,0x8014
0x0008a2a0 lh v0,-0x7b64(asmTemp)
0x0008a2a4 nop
0x0008a2a8 sub v0,v0,a1
0x0008a2ac lui asmTemp,0x8014
0x0008a2b0 sh v0,-0x7b64(asmTemp)
0x0008a2b4 lui asmTemp,0x8014
0x0008a2b8 lh v0,-0x7b76(asmTemp)
0x0008a2bc nop
0x0008a2c0 sub v0,v0,a2
0x0008a2c4 lui asmTemp,0x8014
0x0008a2c8 sh v0,-0x7b76(asmTemp)
0x0008a2cc lui asmTemp,0x8014
0x0008a2d0 lh v0,-0x7b7e(asmTemp)
0x0008a2d4 nop
0x0008a2d8 slti asmTemp,v0,0x0046
0x0008a2dc bne asmTemp,r0,0x0008a314
0x0008a2e0 sw ra,0x0010(sp)
0x0008a2e4 lui asmTemp,0x8014
0x0008a2e8 lh v0,-0x7b76(asmTemp)
0x0008a2ec nop
0x0008a2f0 addi v0,v0,-0x0003
0x0008a2f4 lui asmTemp,0x8014
0x0008a2f8 sh v0,-0x7b76(asmTemp)
0x0008a2fc lui asmTemp,0x8014
0x0008a300 lh v0,-0x7b78(asmTemp)
0x0008a304 nop
0x0008a308 addi v0,v0,-0x0003
0x0008a30c lui asmTemp,0x8014
0x0008a310 sh v0,-0x7b78(asmTemp)
0x0008a314 lhu v0,-0x67a0(gp)
0x0008a318 nop
0x0008a31c addi v0,v0,0x04b0
0x0008a320 sh v0,-0x6c24(gp)
0x0008a324 lh v0,-0x679e(gp)
0x0008a328 nop
0x0008a32c addi v0,v0,0x0001
0x0008a330 sh v0,-0x6c70(gp)
0x0008a334 lh v0,-0x6c70(gp)
0x0008a338 nop
0x0008a33c slti asmTemp,v0,0x0018
0x0008a340 bne asmTemp,r0,0x0008a3d4
0x0008a344 nop
0x0008a348 lui asmTemp,0x8014
0x0008a34c lh v0,-0x7b56(asmTemp)
0x0008a350 nop
0x0008a354 addi v0,v0,0x0001
0x0008a358 lui asmTemp,0x8014
0x0008a35c sh v0,-0x7b56(asmTemp)
0x0008a360 lh v0,-0x6c28(gp)
0x0008a364 nop
0x0008a368 addi v0,v0,0x0001
0x0008a36c sh v0,-0x6c28(gp)
0x0008a370 jal 0x000fc374
0x0008a374 nop
0x0008a378 lh v0,-0x6c70(gp)
0x0008a37c nop
0x0008a380 addi v0,v0,-0x0018
0x0008a384 sh v0,-0x6c70(gp)
0x0008a388 lhu v0,-0x6c24(gp)
0x0008a38c nop
0x0008a390 addiu v0,v0,0x8f80
0x0008a394 sh v0,-0x6c24(gp)
0x0008a398 lh v0,-0x6c28(gp)
0x0008a39c nop
0x0008a3a0 slti asmTemp,v0,0x001f
0x0008a3a4 bne asmTemp,r0,0x0008a3d4
0x0008a3a8 nop
0x0008a3ac lbu v0,-0x6c2a(gp)
0x0008a3b0 nop
0x0008a3b4 addiu v0,v0,0x0001
0x0008a3b8 sb v0,-0x6c2a(gp)
0x0008a3bc lbu v0,-0x6c2a(gp)
0x0008a3c0 nop
0x0008a3c4 sltiu asmTemp,v0,0x0064
0x0008a3c8 bne asmTemp,r0,0x0008a3d4
0x0008a3cc sh r0,-0x6c28(gp)
0x0008a3d0 sb r0,-0x6c2a(gp)
0x0008a3d4 lh a0,-0x6c70(gp)
0x0008a3d8 lh a1,-0x6c6e(gp)
0x0008a3dc jal 0x000dd780
0x0008a3e0 nop
0x0008a3e4 lh v1,-0x6c70(gp)
0x0008a3e8 nop
0x0008a3ec addu a0,v1,r0
0x0008a3f0 bgez v1,0x0008a404
0x0008a3f4 andi v0,v1,0x0003
0x0008a3f8 beq v0,r0,0x0008a404
0x0008a3fc nop
0x0008a400 addiu v0,v0,0xfffc
0x0008a404 bne v0,r0,0x0008a45c
0x0008a408 nop
0x0008a40c lui asmTemp,0x8014
0x0008a410 lh v0,-0x7b76(asmTemp)
0x0008a414 nop
0x0008a418 slti asmTemp,v0,0x0050
0x0008a41c beq asmTemp,r0,0x0008a45c
0x0008a420 addu v1,v0,r0
0x0008a424 lui v0,0xae14
0x0008a428 addi v1,v1,-0x0050
0x0008a42c ori v0,v0,0x7ae1
0x0008a430 mult v0,v1
0x0008a434 lui asmTemp,0x8014
0x0008a438 mfhi v0
0x0008a43c sra v1,v0,0x04
0x0008a440 srl v0,v1,0x1f
0x0008a444 addu v1,v1,v0
0x0008a448 lh v0,-0x7b58(asmTemp)
0x0008a44c addi v1,v1,0x0001
0x0008a450 sub v0,v0,v1
0x0008a454 lui asmTemp,0x8014
0x0008a458 sh v0,-0x7b58(asmTemp)
0x0008a45c addiu asmTemp,r0,0x0010
0x0008a460 bne a0,asmTemp,0x0008a478
0x0008a464 nop
0x0008a468 jal 0x000d7104
0x0008a46c addu a0,r0,r0
0x0008a470 beq r0,r0,0x0008a4a8
0x0008a474 nop
0x0008a478 addiu asmTemp,r0,0x0014
0x0008a47c bne a0,asmTemp,0x0008a494
0x0008a480 nop
0x0008a484 jal 0x000d7104
0x0008a488 addiu a0,r0,0x0001
0x0008a48c beq r0,r0,0x0008a4a8
0x0008a490 nop
0x0008a494 addiu asmTemp,r0,0x0006
0x0008a498 bne a0,asmTemp,0x0008a4a8
0x0008a49c nop
0x0008a4a0 jal 0x000d7104
0x0008a4a4 addiu a0,r0,0x0002
0x0008a4a8 lui asmTemp,0x8014
0x0008a4ac lw v0,-0x7ba0(asmTemp)
0x0008a4b0 nop
0x0008a4b4 andi v0,v0,0x0001
0x0008a4b8 beq v0,r0,0x0008a4f0
0x0008a4bc nop
0x0008a4c0 lui asmTemp,0x8014
0x0008a4c4 lh v0,-0x7b8e(asmTemp)
0x0008a4c8 nop
0x0008a4cc addi v0,v0,0x0001
0x0008a4d0 lui asmTemp,0x8014
0x0008a4d4 sh v0,-0x7b8e(asmTemp)
0x0008a4d8 lui asmTemp,0x8014
0x0008a4dc lh v0,-0x7b8c(asmTemp)
0x0008a4e0 nop
0x0008a4e4 addi v0,v0,0x0001
0x0008a4e8 lui asmTemp,0x8014
0x0008a4ec sh v0,-0x7b8c(asmTemp)
0x0008a4f0 lui asmTemp,0x8014
0x0008a4f4 lw v0,-0x7ba0(asmTemp)
0x0008a4f8 nop
0x0008a4fc andi v0,v0,0x0004
0x0008a500 beq v0,r0,0x0008a590
0x0008a504 nop
0x0008a508 lui asmTemp,0x8014
0x0008a50c lh v0,-0x7b60(asmTemp)
0x0008a510 nop
0x0008a514 addi v0,v0,-0x0078
0x0008a518 lui asmTemp,0x8014
0x0008a51c sh v0,-0x7b60(asmTemp)
0x0008a520 lui asmTemp,0x8014
0x0008a524 lh v0,-0x7b60(asmTemp)
0x0008a528 nop
0x0008a52c bgtz v0,0x0008a5a8
0x0008a530 nop
0x0008a534 lui asmTemp,0x8014
0x0008a538 lh a0,-0x7b64(asmTemp)
0x0008a53c lui asmTemp,0x8015
0x0008a540 lw v1,0x57a8(asmTemp)
0x0008a544 nop
0x0008a548 sll v0,v1,0x03
0x0008a54c sub v0,v0,v1
0x0008a550 sll v1,v0,0x02
0x0008a554 lui v0,0x8012
0x0008a558 addiu v0,v0,0x25c5
0x0008a55c addu v0,v0,v1
0x0008a560 lbu v0,0x0000(v0)
0x0008a564 nop
0x0008a568 slt asmTemp,a0,v0
0x0008a56c beq asmTemp,r0,0x0008a5a8
0x0008a570 nop
0x0008a574 lui asmTemp,0x8014
0x0008a578 lh v0,-0x7b4e(asmTemp)
0x0008a57c nop
0x0008a580 addi v0,v0,0x0001
0x0008a584 lui asmTemp,0x8014
0x0008a588 beq r0,r0,0x0008a5a8
0x0008a58c sh v0,-0x7b4e(asmTemp)
0x0008a590 lui asmTemp,0x8014
0x0008a594 lh v0,-0x7b62(asmTemp)
0x0008a598 nop
0x0008a59c addi v0,v0,-0x003c
0x0008a5a0 lui asmTemp,0x8014
0x0008a5a4 sh v0,-0x7b62(asmTemp)
0x0008a5a8 lui asmTemp,0x8015
0x0008a5ac lw v1,0x57a8(asmTemp)
0x0008a5b0 nop
0x0008a5b4 sll v0,v1,0x03
0x0008a5b8 sub v0,v0,v1
0x0008a5bc sll v1,v0,0x02
0x0008a5c0 lui v0,0x8012
0x0008a5c4 addiu v0,v0,0x25c6
0x0008a5c8 addu v0,v0,v1
0x0008a5cc lbu v1,0x0000(v0)
0x0008a5d0 lui asmTemp,0x8014
0x0008a5d4 lh v0,-0x7b64(asmTemp)
0x0008a5d8 nop
0x0008a5dc sub v0,v0,v1
0x0008a5e0 lui asmTemp,0x8014
0x0008a5e4 sh v0,-0x7b64(asmTemp)
0x0008a5e8 lui asmTemp,0x8014
0x0008a5ec lw v0,-0x7ba0(asmTemp)
0x0008a5f0 nop
0x0008a5f4 andi v0,v0,0x0008
0x0008a5f8 beq v0,r0,0x0008a61c
0x0008a5fc nop
0x0008a600 lui asmTemp,0x8014
0x0008a604 lh v0,-0x7b80(asmTemp)
0x0008a608 nop
0x0008a60c addi v0,v0,-0x04b0
0x0008a610 lui asmTemp,0x8014
0x0008a614 beq r0,r0,0x0008a634
0x0008a618 sh v0,-0x7b80(asmTemp)
0x0008a61c lui asmTemp,0x8014
0x0008a620 lh v0,-0x7b88(asmTemp)
0x0008a624 nop
0x0008a628 addi v0,v0,-0x0006
0x0008a62c lui asmTemp,0x8014
0x0008a630 sh v0,-0x7b88(asmTemp)
0x0008a634 lui asmTemp,0x8014
0x0008a638 lh v0,-0x7b58(asmTemp)
0x0008a63c nop
0x0008a640 addi v0,v0,-0x0001
0x0008a644 lui asmTemp,0x8014
0x0008a648 sh v0,-0x7b58(asmTemp)
0x0008a64c lui asmTemp,0x8014
0x0008a650 lh v0,-0x7b4a(asmTemp)
0x0008a654 nop
0x0008a658 addi v0,v0,0x0001
0x0008a65c lui asmTemp,0x8014
0x0008a660 sh v0,-0x7b4a(asmTemp)
0x0008a664 lui asmTemp,0x8014
0x0008a668 lh v0,-0x7b58(asmTemp)
0x0008a66c nop
0x0008a670 bgez v0,0x0008a680
0x0008a674 nop
0x0008a678 lui asmTemp,0x8014
0x0008a67c sh r0,-0x7b58(asmTemp)
0x0008a680 lui asmTemp,0x8014
0x0008a684 lw v0,-0x7ba0(asmTemp)
0x0008a688 nop
0x0008a68c andi v0,v0,0x0020
0x0008a690 beq v0,r0,0x0008a6b0
0x0008a694 nop
0x0008a698 lui asmTemp,0x8014
0x0008a69c lh v0,-0x7b68(asmTemp)
0x0008a6a0 nop
0x0008a6a4 addi v0,v0,0x0001
0x0008a6a8 lui asmTemp,0x8014
0x0008a6ac sh v0,-0x7b68(asmTemp)
0x0008a6b0 lui asmTemp,0x8014
0x0008a6b4 lw v0,-0x7ba0(asmTemp)
0x0008a6b8 nop
0x0008a6bc andi v0,v0,0x0040
0x0008a6c0 beq v0,r0,0x0008a6e0
0x0008a6c4 nop
0x0008a6c8 lui asmTemp,0x8014
0x0008a6cc lh v0,-0x7b6a(asmTemp)
0x0008a6d0 nop
0x0008a6d4 addi v0,v0,0x0001
0x0008a6d8 lui asmTemp,0x8014
0x0008a6dc sh v0,-0x7b6a(asmTemp)
0x0008a6e0 jal 0x000a568c
0x0008a6e4 nop
0x0008a6e8 lw ra,0x0010(sp)
0x0008a6ec nop
0x0008a6f0 jr ra
0x0008a6f4 addiu sp,sp,0x0018