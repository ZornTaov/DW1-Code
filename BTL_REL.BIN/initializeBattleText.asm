struct {
  int unk1            +0x0
  int unk2            +0x4
  short posX          +0x8
  short posY          +0xA
  short fadeoutSpdX   +0xC
  short fadeoutSpdY   +0xE
  byte speedX         +0x10
  byte someId         +0x11
  byte someCtr        +0x12
  byte pixType        +0x13
}
// 1240 RNG calls?
void initializeBattleText() {
  store(0x1350BC, 0)
  store(0x1350C0, 0)
  
  for(i = 0; i < 155; i++) {
    store(0x742A0 + i * 0x14 + 0x11, i)
    store(0x742A0 + i * 0x14 + 0x12, 24) // distortion counter?
    store(0x742A0 + i * 0x14 + 0x13, random(3)) // pixelType
  }
  
  0x000630F8() // done, name missing, scrambles (+0x11) randomly
  
  for(i = 0; i < 155; i++) {
    entranceDirection = random(2) == 1 ? 1 : -1
    
    posY = load(0x73016 + i * 4)
    store(0x742A0 + i * 0x14 + 0x0A, posY)
    entranceSpeed = -entranceDirection * (random(3) + 1) * 32
    store(0x742A0 + i * 0x14 + 0x10, entranceSpeed)
    
    if(i >= 0 && i < 0x33)
      posX = entranceDirection * 500 + random(100) - 50
    else if(i >= 0x33 && i < 101)
      posX = entranceDirection * 600 + random(100) - 50
    else
      posX = entranceDirection * 700 + random(100) - 50
    
    store(0x742A0 + i * 0x14 + 0x08, posX)
    
    fadeoutSpeed = random(5) + 8
    fadeoutDirX = load(0x73014 + i * 4)
    fadeoutDirY = load(0x73016 + i * 4)
    
    store(0x742A0 + i * 0x14 + 0x0C, fadeoutSpeed * fadeoutDirX / 8)
    store(0x742A0 + i * 0x14 + 0x0E, fadeoutSpeed * fadeoutDirY / 8)
    
    store(0x742A0 + i * 0x14, 0)
    store(0x742A0 + i * 0x14 + 0x02, 0)
    store(0x742A0 + i * 0x14 + 0x04, 0)
  }
  
  setObject(0x1A6, 0, 0, 0x633A4)
}

0x00063170 addiu sp,sp,0xffd8
0x00063174 sw ra,0x0020(sp)
0x00063178 sw s3,0x001c(sp)
0x0006317c sw s2,0x0018(sp)
0x00063180 sw s1,0x0014(sp)
0x00063184 sw s0,0x0010(sp)
0x00063188 lui s0,0x8007
0x0006318c sb r0,-0x6a70(gp)
0x00063190 sw r0,-0x6a6c(gp)
0x00063194 addiu s0,s0,0x42a0
0x00063198 beq r0,r0,0x000631c0
0x0006319c addu s2,r0,r0
0x000631a0 sb s2,0x0011(s0)
0x000631a4 addiu v0,r0,0x0018
0x000631a8 sb v0,0x0012(s0)
0x000631ac jal 0x000a36d4
0x000631b0 addiu a0,r0,0x0003
0x000631b4 sb v0,0x0013(s0)
0x000631b8 addi s2,s2,0x0001
0x000631bc addiu s0,s0,0x0014
0x000631c0 slti asmTemp,s2,0x009b
0x000631c4 bne asmTemp,r0,0x000631a0
0x000631c8 nop
0x000631cc jal 0x000630f8
0x000631d0 nop
0x000631d4 lui s0,0x8007
0x000631d8 addiu s0,s0,0x42a0
0x000631dc addu s2,r0,r0
0x000631e0 beq r0,r0,0x00063364
0x000631e4 addu s3,r0,r0
0x000631e8 jal 0x000a36d4
0x000631ec addiu a0,r0,0x0002
0x000631f0 addiu asmTemp,r0,0x0001
0x000631f4 bne v0,asmTemp,0x00063204
0x000631f8 addiu s1,r0,0xffff
0x000631fc beq r0,r0,0x00063204
0x00063200 addiu s1,r0,0x0001
0x00063204 lui v0,0x8007
0x00063208 addiu v0,v0,0x3016
0x0006320c addu v0,v0,s3
0x00063210 lh v0,0x0000(v0)
0x00063214 nop
0x00063218 sh v0,0x000a(s0)
0x0006321c jal 0x000a36d4
0x00063220 addiu a0,r0,0x0003
0x00063224 addi v0,v0,0x0001
0x00063228 sll v1,v0,0x05
0x0006322c sub v0,r0,s1
0x00063230 mult v0,v1
0x00063234 slt asmTemp,s2,r0
0x00063238 mflo v0
0x0006323c bne asmTemp,r0,0x0006327c
0x00063240 sb v0,0x0010(s0)
0x00063244 slti asmTemp,s2,0x0033
0x00063248 beq asmTemp,r0,0x0006327c
0x0006324c nop
0x00063250 jal 0x000a36d4
0x00063254 addiu a0,r0,0x0064
0x00063258 sll v1,s1,0x05
0x0006325c sub v1,v1,s1
0x00063260 sll v1,v1,0x02
0x00063264 add v1,v1,s1
0x00063268 sll v1,v1,0x02
0x0006326c add v0,v1,v0
0x00063270 addi v0,v0,-0x0032
0x00063274 beq r0,r0,0x000632e0
0x00063278 sh v0,0x0008(s0)
0x0006327c slti asmTemp,s2,0x0033
0x00063280 bne asmTemp,r0,0x000632c0
0x00063284 nop
0x00063288 slti asmTemp,s2,0x0065
0x0006328c beq asmTemp,r0,0x000632c0
0x00063290 nop
0x00063294 jal 0x000a36d4
0x00063298 addiu a0,r0,0x0064
0x0006329c sll v1,s1,0x04
0x000632a0 sub a0,v1,s1
0x000632a4 sll v1,a0,0x02
0x000632a8 add v1,a0,v1
0x000632ac sll v1,v1,0x03
0x000632b0 add v0,v1,v0
0x000632b4 addi v0,v0,-0x0032
0x000632b8 beq r0,r0,0x000632e0
0x000632bc sh v0,0x0008(s0)
0x000632c0 jal 0x000a36d4
0x000632c4 addiu a0,r0,0x0064
0x000632c8 addiu v1,r0,0x02bc
0x000632cc mult s1,v1
0x000632d0 mflo v1
0x000632d4 add v0,v1,v0
0x000632d8 addi v0,v0,-0x0032
0x000632dc sh v0,0x0008(s0)
0x000632e0 jal 0x000a36d4
0x000632e4 addiu a0,r0,0x0005
0x000632e8 lui v1,0x8007
0x000632ec addiu v1,v1,0x3014
0x000632f0 addu v1,v1,s3
0x000632f4 addi v0,v0,0x0008
0x000632f8 lh v1,0x0000(v1)
0x000632fc addu a0,v0,r0
0x00063300 mult v0,v1
0x00063304 mflo v0
0x00063308 bgez v0,0x00063318
0x0006330c sra t9,v0,0x03
0x00063310 addiu v0,v0,0x0007
0x00063314 sra t9,v0,0x03
0x00063318 lui v0,0x8007
0x0006331c addiu v0,v0,0x3016
0x00063320 sh t9,0x000c(s0)
0x00063324 addu v0,v0,s3
0x00063328 lh v0,0x0000(v0)
0x0006332c nop
0x00063330 mult a0,v0
0x00063334 mflo v0
0x00063338 bgez v0,0x00063348
0x0006333c sra t9,v0,0x03
0x00063340 addiu v0,v0,0x0007
0x00063344 sra t9,v0,0x03
0x00063348 sh t9,0x000e(s0)
0x0006334c sh r0,0x0000(s0)
0x00063350 sh r0,0x0002(s0)
0x00063354 sh r0,0x0004(s0)
0x00063358 addi s2,s2,0x0001
0x0006335c addi s3,s3,0x0004
0x00063360 addiu s0,s0,0x0014
0x00063364 slti asmTemp,s2,0x009b
0x00063368 bne asmTemp,r0,0x000631e8
0x0006336c nop
0x00063370 lui a3,0x8006
0x00063374 addiu a0,r0,0x01a6
0x00063378 addu a1,r0,r0
0x0006337c addu a2,r0,r0
0x00063380 jal 0x000a2f64
0x00063384 addiu a3,a3,0x33a4
0x00063388 lw ra,0x0020(sp)
0x0006338c lw s3,0x001c(sp)
0x00063390 lw s2,0x0018(sp)
0x00063394 lw s1,0x0014(sp)
0x00063398 lw s0,0x0010(sp)
0x0006339c jr ra
0x000633a0 addiu sp,sp,0x0028