void combatInit() {
  0x000623A0() // done, name missing
  resetFlattenGlobal()
  
  store(0x13507C, -1)
  
  tileX, tileY = getEntityTileFromModel(0x12F348) // deferred via 0x0005B1AC()
  store(0x134D58, tileX)
  store(0x134D57, tileY)
  
  0x0005B1C0() // done, name missing
  
  combatHead = load(0x134D4C)
  
  store(0x134D60, 0)
  store(0x134D64, 0)
  store(0x134D66, 1)
  store(0x134D68, 0)
  store(0x134D6A, 0)
  store(0x134D70, 0)
  store(0x134D74, 0)
  store(0x134D80, 0)
  store(0x135078, load(0x1557FE)) // aiMode
  store(0x135080, 0)
  
  store(combatHead + 0x066A, -1) // finisher chargeup
  // change command data
  store(combatHead + 0x0673, 0)
  store(combatHead + 0x0674, 0)
  
  store(0x134D78, isTriggerSet(2)) // disable battle commands
  
  for(i = 0; i < 2; i++)
    store(combatHead + 0x0671 + i, -1)
    
  0x000A3B20() // done, name missing
  
  for(i = 0; i < 12; i++)
    store(combatHead + 0x0675 + i, -1)
  
  setObject(0x191, 0, 0, 0x0005CFB4) // deferred via 0x0005B23C()
  0x00064550() // done, name missing
  renderInventoryText()
  
  store(combatHead + 0x0640, 0)
  store(combatHead + 0x0642, 0)
  store(combatHead + 0x0644, 0)
  store(combatHead + 0x0646, 0)
  
  for(i = 0; i < load(0134D6C); i++) {
    combatPtr = combatHead + i * 0x168
    
    entityId = load(combatHead + 0x066C + i) * 4
    entityStatsPtr = load(0x12F344 + entityId) + 0x38
    
    store(entityStatsPtr + 0x1B, 0)
    store(combatHead + 0x05C4 + i * 0x28, -1)
    
    store(combatPtr, -1)
    store(combatPtr + 0x14, -1)
    store(combatPtr + 0x1A, 0)
    store(combatPtr + 0x22, 0)
    store(combatPtr + 0x26, 0)
    store(combatPtr + 0x28, 0)
    store(combatPtr + 0x2C, 0)
    store(combatPtr + 0x2E, 0)
    store(combatPtr + 0x30, 0)
    store(combatPtr + 0x32, 100)
    store(combatPtr + 0x34, 0)
    store(combatPtr + 0x36, 0)
    store(combatPtr + 0x37, -1)
    store(combatPtr + 0x3B, 0)
    
    brains = load(entityStatsPtr + 0x06)
    
    // num of self buffs allowed
    if(brains < 400)
      store(combatPtr + 0x39, brains * 0.01)
    else if(brains < 600)
      store(combatPtr + 0x39, 4)
    else
      store(combatPtr + 0x39, 5)
    
    store(combatPtr + 0x3A, brains * 0.1 + 5) // self buff timer
    store(combatPtr + 0x18, 3000 - load(entityStatsPtr + 0x04)) // finisher timer
    
    for(j = 0; j < 150; j++) {
      store(combatHead + 0x3C + j, -1)
      store(combatHead + 0xD2 + j, -1)
    }
  }
  
  brains = load(0x1557E6)
  
  if(brains < 500) {
    numCommands = load(0x1346E0 + brains * 0.01)
    store(combatHead + 0x0666, numCommands) // numCommands
  }
  else
    store(combatHead + 0x0666, 9)
  
  store(combatHead + 0x654, 11) // finisher
  store(combatHead + 0x655, 1) // run away
  
  switch(load(combatHead + 0x0666) - 3) {
    case 0:
      store(combatHead + 0x0656, 3)
      break
    case 1:
      store(combatHead + 0x0656, 2)
      store(combatHead + 0x0657, 3)
      break
    case 2:
      store(combatHead + 0x0656, 4)
      store(combatHead + 0x0657, 2)
      store(combatHead + 0x0658, 3)
      break
    case 4:
      store(combatHead + 0x0656, 7)
      store(combatHead + 0x0657, 5)
      store(combatHead + 0x0658, 4)
      store(combatHead + 0x0659, 2)
      store(combatHead + 0x065A, 3)
      break
    case 5:
      store(combatHead + 0x0656, 7)
      store(combatHead + 0x0657, 6)
      store(combatHead + 0x0658, 5)
      store(combatHead + 0x0659, 4)
      store(combatHead + 0x065A, 2)
      store(combatHead + 0x065B, 3)
      break
    case 6:
      store(combatHead + 0x0656, 7)
      store(combatHead + 0x0657, 6)
      store(combatHead + 0x0658, 5)
      
      offset = 5
      if(load(0x1557EE) != -1)
        store(combatHead + 0x0654 + offset++, 10)
      if(load(0x1557ED) != -1)
        store(combatHead + 0x0654 + offset++, 9)
      if(load(0x1557EC) != -1)
        store(combatHead + 0x0654 + offset++, 8)
      
      store(combatHead + 0x0654 + offset++, 3)
      store(combatHead + 0x0666, offset)
      break
  }
  
  hoveredCommand = load(combatHead + 0x0666) - 1
  store(combatHead + 0x0652, offset)
  store(combatHead + 0x0650, 3)
  store(combatHead + 0x064E, 3)
  
  for(i = 0; load(0x134D6C) < i; i++) {
    entityId = load(combatHead + 0x66C + i)
    entityStatsPtr = load(0x12F344 + entityId * 4) + 0x38
    
    store(0x13D610 + 0x00 + i * 0x0C, load(entityStatsPtr + 0x10)) // HP
    store(0x13D610 + 0x02 + i * 0x0C, load(entityStatsPtr + 0x12)) // MP
    store(0x13D610 + 0x04 + i * 0x0C, load(entityStatsPtr + 0x00)) // Off
    store(0x13D610 + 0x06 + i * 0x0C, load(entityStatsPtr + 0x02)) // Def
    store(0x13D610 + 0x08 + i * 0x0C, load(entityStatsPtr + 0x04)) // Speed
    store(0x13D610 + 0x0A + i * 0x0C, load(entityStatsPtr + 0x06)) // Brains
  }
  
  if(load(0x138460) & 0x0060 != 0) { // is sick or injured
    store(0x1557E0, load(0x1557E0) * 0.8) // offense
    store(0x1557E2, load(0x1557E2) * 0.8) // defense
    store(0x1557E4, load(0x1557E4) * 0.8) // speed
    store(0x1557E6, load(0x1557E6) * 0.8) // brains
  }
  
  store(combatHead + 0x0648, load(0x1557F4)) // store current HP
  setCommandBar()
}

0x00056ca8 addiu sp,sp,0xffe8
0x00056cac sw ra,0x0010(sp)
0x00056cb0 jal 0x000623a0
0x00056cb4 nop
0x00056cb8 jal 0x000a1cd8
0x00056cbc nop
0x00056cc0 addiu v0,r0,0xffff
0x00056cc4 sw v0,-0x6ab0(gp)
0x00056cc8 jal 0x0005b1ac
0x00056ccc nop
0x00056cd0 jal 0x0005b1c0
0x00056cd4 nop
0x00056cd8 lw v0,-0x6de0(gp)
0x00056cdc addiu v1,r0,0xffff
0x00056ce0 sb v1,0x066a(v0)
0x00056ce4 lui asmTemp,0x8015
0x00056ce8 lbu v0,0x57fe(asmTemp)
0x00056cec sw r0,-0x6dcc(gp)
0x00056cf0 sb v0,-0x6ab4(gp)
0x00056cf4 addiu v0,r0,0x0001
0x00056cf8 sh v0,-0x6dc6(gp)
0x00056cfc lw v0,-0x6de0(gp)
0x00056d00 sw r0,-0x6dac(gp)
0x00056d04 sw r0,-0x6aac(gp)
0x00056d08 sh r0,-0x6dc4(gp)
0x00056d0c sh r0,-0x6dc2(gp)
0x00056d10 sb r0,-0x6dc8(gp)
0x00056d14 sb r0,0x0673(v0)
0x00056d18 lw v0,-0x6de0(gp)
0x00056d1c nop
0x00056d20 sb r0,0x0674(v0)
0x00056d24 sw r0,-0x6db8(gp)
0x00056d28 sw r0,-0x6dbc(gp)
0x00056d2c jal 0x0010643c
0x00056d30 addiu a0,r0,0x0002
0x00056d34 sw v0,-0x6db4(gp)
0x00056d38 beq r0,r0,0x00056d54
0x00056d3c addu v0,r0,r0
0x00056d40 lw v1,-0x6de0(gp)
0x00056d44 addiu a0,r0,0x00ff
0x00056d48 addu v1,v0,v1
0x00056d4c sb a0,0x0671(v1)
0x00056d50 addi v0,v0,0x0001
0x00056d54 slti asmTemp,v0,0x0002
0x00056d58 bne asmTemp,r0,0x00056d40
0x00056d5c nop
0x00056d60 jal 0x000a3b20
0x00056d64 nop
0x00056d68 beq r0,r0,0x00056d84
0x00056d6c addu v0,r0,r0
0x00056d70 lw v1,-0x6de0(gp)
0x00056d74 addiu a0,r0,0x00ff
0x00056d78 addu v1,v0,v1
0x00056d7c sb a0,0x0675(v1)
0x00056d80 addi v0,v0,0x0001
0x00056d84 slti asmTemp,v0,0x000c
0x00056d88 bne asmTemp,r0,0x00056d70
0x00056d8c nop
0x00056d90 jal 0x0005b23c
0x00056d94 nop
0x00056d98 jal 0x00064550
0x00056d9c nop
0x00056da0 jal 0x000dac48
0x00056da4 nop
0x00056da8 lw v1,-0x6de0(gp)
0x00056dac addu a1,r0,r0
0x00056db0 addu v0,v1,r0
0x00056db4 sh r0,0x0642(v0)
0x00056db8 lw v0,-0x6de0(gp)
0x00056dbc nop
0x00056dc0 sh r0,0x0640(v0)
0x00056dc4 lw v0,-0x6de0(gp)
0x00056dc8 nop
0x00056dcc sh r0,0x0646(v0)
0x00056dd0 lw v0,-0x6de0(gp)
0x00056dd4 nop
0x00056dd8 sh r0,0x0644(v0)
0x00056ddc beq r0,r0,0x00056f34
0x00056de0 addu v0,r0,r0
0x00056de4 lw a0,-0x6de0(gp)
0x00056de8 addiu a3,r0,0x00ff
0x00056dec addu a0,v0,a0
0x00056df0 lbu a0,0x066c(a0)
0x00056df4 nop
0x00056df8 sll a2,a0,0x02
0x00056dfc lui a0,0x8013
0x00056e00 addiu a0,a0,0xf344
0x00056e04 addu a0,a0,a2
0x00056e08 lw a0,0x0000(a0)
0x00056e0c nop
0x00056e10 addiu a0,a0,0x0038
0x00056e14 sb r0,0x001b(a0)
0x00056e18 sb a3,0x0037(v1)
0x00056e1c sh r0,0x002e(v1)
0x00056e20 sh r0,0x0030(v1)
0x00056e24 sh r0,0x0034(v1)
0x00056e28 sb r0,0x0036(v1)
0x00056e2c lw a2,-0x6de0(gp)
0x00056e30 nop
0x00056e34 addu a2,a1,a2
0x00056e38 sb a3,0x05c4(a2)
0x00056e3c sh r0,0x0022(v1)
0x00056e40 sh r0,0x0026(v1)
0x00056e44 sh r0,0x0028(v1)
0x00056e48 sh r0,0x001a(v1)
0x00056e4c addiu a2,r0,0xffff
0x00056e50 sw a2,0x0000(v1)
0x00056e54 sw a2,0x0014(v1)
0x00056e58 addiu a2,r0,0x0064
0x00056e5c sh a2,0x0032(v1)
0x00056e60 sh r0,0x002c(v1)
0x00056e64 sb r0,0x003b(v1)
0x00056e68 lh a2,0x0006(a0)
0x00056e6c nop
0x00056e70 slti asmTemp,a2,0x0190
0x00056e74 beq asmTemp,r0,0x00056ea4
0x00056e78 addu a3,a2,r0
0x00056e7c lui a2,0x51eb
0x00056e80 ori a2,a2,0x851f
0x00056e84 mult a2,a3
0x00056e88 mfhi a2
0x00056e8c srl a3,a3,0x1f
0x00056e90 sra a2,a2,0x05
0x00056e94 addu a2,a2,a3
0x00056e98 addi a2,a2,0x0001
0x00056e9c beq r0,r0,0x00056ec4
0x00056ea0 sb a2,0x0039(v1)
0x00056ea4 slti asmTemp,a3,0x0258
0x00056ea8 beq asmTemp,r0,0x00056ebc
0x00056eac nop
0x00056eb0 addiu a2,r0,0x0004
0x00056eb4 beq r0,r0,0x00056ec4
0x00056eb8 sb a2,0x0039(v1)
0x00056ebc addiu a2,r0,0x0005
0x00056ec0 sb a2,0x0039(v1)
0x00056ec4 lui a2,0x6666
0x00056ec8 lh a3,0x0006(a0)
0x00056ecc ori a2,a2,0x6667
0x00056ed0 mult a2,a3
0x00056ed4 mfhi a2
0x00056ed8 srl a3,a3,0x1f
0x00056edc sra a2,a2,0x02
0x00056ee0 addu a2,a2,a3
0x00056ee4 addi a2,a2,0x0005
0x00056ee8 sb a2,0x003a(v1)
0x00056eec lh a2,0x0004(a0)
0x00056ef0 addu a3,r0,r0
0x00056ef4 addiu a0,r0,0x0bb8
0x00056ef8 sub a0,a0,a2
0x00056efc beq r0,r0,0x00056f1c
0x00056f00 sh a0,0x0018(v1)
0x00056f04 addu a0,a3,v1
0x00056f08 addiu a2,r0,0xffff
0x00056f0c sb a2,0x003c(a0)
0x00056f10 addu a0,v0,v1
0x00056f14 sb a2,0x00d2(a0)
0x00056f18 addi a3,a3,0x0001
0x00056f1c slti asmTemp,a3,0x0096
0x00056f20 bne asmTemp,r0,0x00056f04
0x00056f24 nop
0x00056f28 addiu v1,v1,0x0168
0x00056f2c addi v0,v0,0x0001
0x00056f30 addi a1,a1,0x0028
0x00056f34 lh a0,-0x6dc0(gp)
0x00056f38 nop
0x00056f3c slt asmTemp,a0,v0
0x00056f40 beq asmTemp,r0,0x00056de4
0x00056f44 nop
0x00056f48 lui asmTemp,0x8015
0x00056f4c lh v1,0x57e6(asmTemp)
0x00056f50 nop
0x00056f54 slti asmTemp,v1,0x01f4
0x00056f58 beq asmTemp,r0,0x00056f94
0x00056f5c nop
0x00056f60 lui v0,0x51eb
0x00056f64 ori v0,v0,0x851f
0x00056f68 mult v0,v1
0x00056f6c mfhi v0
0x00056f70 srl v1,v1,0x1f
0x00056f74 sra v0,v0,0x05
0x00056f78 addu v1,v0,v1
0x00056f7c addiu v0,gp,0x8bb4
0x00056f80 addu v0,v0,v1
0x00056f84 lbu v1,0x0000(v0)
0x00056f88 lw v0,-0x6de0(gp)
0x00056f8c beq r0,r0,0x00056fa0
0x00056f90 sb v1,0x0666(v0)
0x00056f94 lw v0,-0x6de0(gp)
0x00056f98 addiu v1,r0,0x0009
0x00056f9c sb v1,0x0666(v0)
0x00056fa0 lw v0,-0x6de0(gp)
0x00056fa4 addiu v1,r0,0x000b
0x00056fa8 sb v1,0x0654(v0)
0x00056fac lw v0,-0x6de0(gp)
0x00056fb0 addiu v1,r0,0x0001
0x00056fb4 sb v1,0x0655(v0)
0x00056fb8 lw a0,-0x6de0(gp)
0x00056fbc nop
0x00056fc0 lbu v0,0x0666(a0)
0x00056fc4 nop
0x00056fc8 addi v0,v0,-0x0003
0x00056fcc sltiu asmTemp,v0,0x0007
0x00056fd0 beq asmTemp,r0,0x0005718c
0x00056fd4 nop
0x00056fd8 lui v1,0x8007
0x00056fdc addiu v1,v1,0x2d74
0x00056fe0 sll v0,v0,0x02
0x00056fe4 addu v0,v0,v1
0x00056fe8 lw v0,0x0000(v0)
0x00056fec nop
0x00056ff0 jr v0
0x00056ff4 nop
0x00056ff8 addiu v0,r0,0x0003
0x00056ffc beq r0,r0,0x0005718c
0x00057000 sb v0,0x0656(a0)
0x00057004 addiu v0,r0,0x0002
0x00057008 sb v0,0x0656(a0)
0x0005700c lw v0,-0x6de0(gp)
0x00057010 addiu v1,r0,0x0003
0x00057014 beq r0,r0,0x0005718c
0x00057018 sb v1,0x0657(v0)
0x0005701c addiu v0,r0,0x0004
0x00057020 sb v0,0x0656(a0)
0x00057024 lw v0,-0x6de0(gp)
0x00057028 addiu v1,r0,0x0002
0x0005702c sb v1,0x0657(v0)
0x00057030 lw v0,-0x6de0(gp)
0x00057034 addiu v1,r0,0x0003
0x00057038 beq r0,r0,0x0005718c
0x0005703c sb v1,0x0658(v0)
0x00057040 addiu v0,r0,0x0007
0x00057044 sb v0,0x0656(a0)
0x00057048 lw v0,-0x6de0(gp)
0x0005704c addiu v1,r0,0x0005
0x00057050 sb v1,0x0657(v0)
0x00057054 lw v0,-0x6de0(gp)
0x00057058 addiu v1,r0,0x0004
0x0005705c sb v1,0x0658(v0)
0x00057060 lw v0,-0x6de0(gp)
0x00057064 addiu v1,r0,0x0002
0x00057068 sb v1,0x0659(v0)
0x0005706c lw v0,-0x6de0(gp)
0x00057070 addiu v1,r0,0x0003
0x00057074 beq r0,r0,0x0005718c
0x00057078 sb v1,0x065a(v0)
0x0005707c addiu v0,r0,0x0007
0x00057080 sb v0,0x0656(a0)
0x00057084 lw v0,-0x6de0(gp)
0x00057088 addiu v1,r0,0x0006
0x0005708c sb v1,0x0657(v0)
0x00057090 lw v0,-0x6de0(gp)
0x00057094 addiu v1,r0,0x0005
0x00057098 sb v1,0x0658(v0)
0x0005709c lw v0,-0x6de0(gp)
0x000570a0 addiu v1,r0,0x0004
0x000570a4 sb v1,0x0659(v0)
0x000570a8 lw v0,-0x6de0(gp)
0x000570ac addiu v1,r0,0x0002
0x000570b0 sb v1,0x065a(v0)
0x000570b4 lw v0,-0x6de0(gp)
0x000570b8 addiu v1,r0,0x0003
0x000570bc beq r0,r0,0x0005718c
0x000570c0 sb v1,0x065b(v0)
0x000570c4 addiu v0,r0,0x0007
0x000570c8 sb v0,0x0656(a0)
0x000570cc lw v0,-0x6de0(gp)
0x000570d0 addiu v1,r0,0x0006
0x000570d4 sb v1,0x0657(v0)
0x000570d8 lw v1,-0x6de0(gp)
0x000570dc addiu v0,r0,0x0005
0x000570e0 sb v0,0x0658(v1)
0x000570e4 lui asmTemp,0x8015
0x000570e8 lbu v1,0x57ee(asmTemp)
0x000570ec addiu asmTemp,r0,0x00ff
0x000570f0 beq v1,asmTemp,0x00057110
0x000570f4 nop
0x000570f8 addu v1,v0,r0
0x000570fc lw a0,-0x6de0(gp)
0x00057100 addi v0,v1,0x0001
0x00057104 addiu a1,r0,0x000a
0x00057108 addu v1,v1,a0
0x0005710c sb a1,0x0654(v1)
0x00057110 lui asmTemp,0x8015
0x00057114 lbu v1,0x57ed(asmTemp)
0x00057118 addiu asmTemp,r0,0x00ff
0x0005711c beq v1,asmTemp,0x0005713c
0x00057120 nop
0x00057124 addu v1,v0,r0
0x00057128 lw a0,-0x6de0(gp)
0x0005712c addi v0,v1,0x0001
0x00057130 addiu a1,r0,0x0009
0x00057134 addu v1,v1,a0
0x00057138 sb a1,0x0654(v1)
0x0005713c lui asmTemp,0x8015
0x00057140 lbu v1,0x57ec(asmTemp)
0x00057144 addiu asmTemp,r0,0x00ff
0x00057148 beq v1,asmTemp,0x00057168
0x0005714c nop
0x00057150 addu v1,v0,r0
0x00057154 lw a0,-0x6de0(gp)
0x00057158 addi v0,v1,0x0001
0x0005715c addiu a1,r0,0x0008
0x00057160 addu v1,v1,a0
0x00057164 sb a1,0x0654(v1)
0x00057168 addu v1,v0,r0
0x0005716c lw a0,-0x6de0(gp)
0x00057170 addi v0,v1,0x0001
0x00057174 addiu a1,r0,0x0003
0x00057178 addu v1,v1,a0
0x0005717c sb a1,0x0654(v1)
0x00057180 lw v1,-0x6de0(gp)
0x00057184 nop
0x00057188 sb v0,0x0666(v1)
0x0005718c lw v1,-0x6de0(gp)
0x00057190 nop
0x00057194 lbu v0,0x0666(v1)
0x00057198 nop
0x0005719c addi v0,v0,-0x0001
0x000571a0 sb v0,0x0652(v1)
0x000571a4 lw v0,-0x6de0(gp)
0x000571a8 addiu v1,r0,0x0003
0x000571ac sb v1,0x0650(v0)
0x000571b0 lw v0,-0x6de0(gp)
0x000571b4 nop
0x000571b8 sb v1,0x064e(v0)
0x000571bc lui v1,0x8014
0x000571c0 addiu v1,v1,0xd610
0x000571c4 addu v0,r0,r0
0x000571c8 beq r0,r0,0x00057258
0x000571cc addu v1,v1,r0
0x000571d0 lw a0,-0x6de0(gp)
0x000571d4 addu a3,v1,r0
0x000571d8 addu a0,v0,a0
0x000571dc lbu a0,0x066c(a0)
0x000571e0 addi v0,v0,0x0001
0x000571e4 sll a1,a0,0x02
0x000571e8 lui a0,0x8013
0x000571ec addiu a0,a0,0xf344
0x000571f0 addu a0,a0,a1
0x000571f4 lw a0,0x0000(a0)
0x000571f8 addu a1,a3,r0
0x000571fc addiu a0,a0,0x0038
0x00057200 lh a2,0x0010(a0)
0x00057204 addiu a3,a1,0x0002
0x00057208 sh a2,0x0000(a1)
0x0005720c addu a1,a3,r0
0x00057210 lh a2,0x0012(a0)
0x00057214 addiu a3,a1,0x0002
0x00057218 sh a2,0x0000(a1)
0x0005721c addu a1,a3,r0
0x00057220 lh a2,0x0000(a0)
0x00057224 addiu a3,a1,0x0002
0x00057228 sh a2,0x0000(a1)
0x0005722c addu a1,a3,r0
0x00057230 lh a2,0x0002(a0)
0x00057234 addiu a3,a1,0x0002
0x00057238 sh a2,0x0000(a1)
0x0005723c addu a1,a3,r0
0x00057240 lh a2,0x0004(a0)
0x00057244 addiu a3,a1,0x0002
0x00057248 sh a2,0x0000(a1)
0x0005724c lh a0,0x0006(a0)
0x00057250 addi v1,v1,0x000c
0x00057254 sh a0,0x0000(a3)
0x00057258 lh a0,-0x6dc0(gp)
0x0005725c nop
0x00057260 slt asmTemp,a0,v0
0x00057264 beq asmTemp,r0,0x000571d0
0x00057268 nop
0x0005726c lui asmTemp,0x8014
0x00057270 lw v0,-0x7ba0(asmTemp)
0x00057274 nop
0x00057278 andi v0,v0,0x0060
0x0005727c beq v0,r0,0x00057340
0x00057280 nop
0x00057284 lui a0,0x8015
0x00057288 addiu a0,a0,0x57e0
0x0005728c lh a2,0x0000(a0)
0x00057290 lui v0,0x6666
0x00057294 ori v0,v0,0x6667
0x00057298 mult v0,a2
0x0005729c srl a1,a2,0x1f
0x000572a0 mfhi v1
0x000572a4 sra v1,v1,0x01
0x000572a8 addu v1,v1,a1
0x000572ac sll v1,v1,0x10
0x000572b0 sra v1,v1,0x10
0x000572b4 sub v1,a2,v1
0x000572b8 sh v1,0x0000(a0)
0x000572bc lh a2,0x0002(a0)
0x000572c0 addu v1,v0,r0
0x000572c4 mult v1,a2
0x000572c8 srl a1,a2,0x1f
0x000572cc mfhi v1
0x000572d0 sra v1,v1,0x01
0x000572d4 addu v1,v1,a1
0x000572d8 sll v1,v1,0x10
0x000572dc sra v1,v1,0x10
0x000572e0 sub v1,a2,v1
0x000572e4 sh v1,0x0002(a0)
0x000572e8 lh a2,0x0004(a0)
0x000572ec addu v1,v0,r0
0x000572f0 mult v1,a2
0x000572f4 srl a1,a2,0x1f
0x000572f8 mfhi v1
0x000572fc sra v1,v1,0x01
0x00057300 addu v1,v1,a1
0x00057304 sll v1,v1,0x10
0x00057308 sra v1,v1,0x10
0x0005730c sub v1,a2,v1
0x00057310 sh v1,0x0004(a0)
0x00057314 lh a1,0x0006(a0)
0x00057318 nop
0x0005731c mult v0,a1
0x00057320 srl v1,a1,0x1f
0x00057324 mfhi v0
0x00057328 sra v0,v0,0x01
0x0005732c addu v0,v0,v1
0x00057330 sll v0,v0,0x10
0x00057334 sra v0,v0,0x10
0x00057338 sub v0,a1,v0
0x0005733c sh v0,0x0006(a0)
0x00057340 lui asmTemp,0x8015
0x00057344 lh v1,0x57f4(asmTemp)
0x00057348 lw v0,-0x6de0(gp)
0x0005734c nop
0x00057350 sh v1,0x0648(v0)
0x00057354 jal 0x0006142c
0x00057358 nop
0x0005735c lw ra,0x0010(sp)
0x00057360 nop
0x00057364 jr ra
0x00057368 addiu sp,sp,0x0018