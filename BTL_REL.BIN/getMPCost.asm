/**
 * Gets MP cost of a move by a given Digimon and move slot.
 * When the move is not useable for various reasons it returns 0.
 */
int getMPCost(entityPtr, combatPtr, moveSlot) {
  moveId = load(entityPtr + 0x44 + moveSlot)
  
  if(moveId == -1) // no move set
    return 0
    
  techId = getTechFromMove(entityPtr, moveId)
  
  if(techId == 0x2D) // is counter
    return 0
    
  if(techId >= 0x3A && techId < 0x71) // is finisher
    return 0
  
  techOffset = techId * 0x10
  range = load(0x126244 + techOffset) // range
  
  if(range == 4 && load(combatPtr + 0x39) == 0) // check self-buff limit
    return 0
  
  if(load(combatPtr + 0x37) == -1 && load(0x126249 + techOffset) & 1 == 1) // not sure, check a move property? aoe?
    return 0
  
  mpCost = load(0x126242 + techOffset) * 3
  
  if(entityPtr == load(0x12F348)) { // is partner
    brains = load(0x1557E6) // brains
    
    if(brains == 999)
      mpCost = mpCost * 0.80
    else if(brains >= 900)
      mpCost = mpCost * 0.85
    else if(brains >= 800)
      mpCost = mpCost * 0.90
    else if(brains >= 700)
      mpCost = mpCost * 0.95
    
    isSickOrInjured = load(0x138460) & 0x0060
    
    if(isSickOrInjured != 0)
      mpCost = mpCost * 1.5
  }
  
  currentMP = load(entityPtr + 0x4E)
  
  return currentMP >= mpCost ? 1 : 0
}

0x0005d374 addiu sp,sp,0xffe0
0x0005d378 sw ra,0x0018(sp)
0x0005d37c sw s1,0x0014(sp)
0x0005d380 sw s0,0x0010(sp)
0x0005d384 addu s0,a0,r0
0x0005d388 addu s1,a1,r0
0x0005d38c addu v0,a2,s0
0x0005d390 lbu a1,0x0044(v0)
0x0005d394 addiu asmTemp,r0,0x00ff
0x0005d398 bne a1,asmTemp,0x0005d3a8
0x0005d39c nop
0x0005d3a0 beq r0,r0,0x0005d5f4
0x0005d3a4 addu v0,r0,r0
0x0005d3a8 jal 0x000e6000
0x0005d3ac nop
0x0005d3b0 sll v0,v0,0x10
0x0005d3b4 sra v0,v0,0x10
0x0005d3b8 addiu asmTemp,r0,0x002d
0x0005d3bc bne v0,asmTemp,0x0005d3cc
0x0005d3c0 nop
0x0005d3c4 beq r0,r0,0x0005d5f4
0x0005d3c8 addu v0,r0,r0
0x0005d3cc slti asmTemp,v0,0x003a
0x0005d3d0 bne asmTemp,r0,0x0005d3ec
0x0005d3d4 nop
0x0005d3d8 slti asmTemp,v0,0x0071
0x0005d3dc beq asmTemp,r0,0x0005d3ec
0x0005d3e0 nop
0x0005d3e4 beq r0,r0,0x0005d5f4
0x0005d3e8 addu v0,r0,r0
0x0005d3ec sll v1,v0,0x04
0x0005d3f0 lui v0,0x8012
0x0005d3f4 addiu v0,v0,0x6244
0x0005d3f8 addu v0,v0,v1
0x0005d3fc lbu v0,0x0000(v0)
0x0005d400 addiu asmTemp,r0,0x0004
0x0005d404 bne v0,asmTemp,0x0005d424
0x0005d408 addu a0,v1,r0
0x0005d40c lbu v0,0x0039(s1)
0x0005d410 nop
0x0005d414 bne v0,r0,0x0005d424
0x0005d418 nop
0x0005d41c beq r0,r0,0x0005d5f4
0x0005d420 addu v0,r0,r0
0x0005d424 lbu v0,0x0037(s1)
0x0005d428 addiu asmTemp,r0,0x00ff
0x0005d42c bne v0,asmTemp,0x0005d45c
0x0005d430 nop
0x0005d434 lui v0,0x8012
0x0005d438 addiu v0,v0,0x6249
0x0005d43c addu v0,v0,a0
0x0005d440 lbu v0,0x0000(v0)
0x0005d444 addiu asmTemp,r0,0x0001
0x0005d448 andi v0,v0,0x0001
0x0005d44c bne v0,asmTemp,0x0005d45c
0x0005d450 nop
0x0005d454 beq r0,r0,0x0005d5f4
0x0005d458 addu v0,r0,r0
0x0005d45c lui v0,0x8012
0x0005d460 addiu v0,v0,0x6242
0x0005d464 addu v0,v0,a0
0x0005d468 lbu v1,0x0000(v0)
0x0005d46c lui asmTemp,0x8013
0x0005d470 sll v0,v1,0x01
0x0005d474 add v0,v0,v1
0x0005d478 sll v0,v0,0x10
0x0005d47c lw v1,-0x0cb8(asmTemp)
0x0005d480 nop
0x0005d484 bne s0,v1,0x0005d5d8
0x0005d488 sra v0,v0,0x10
0x0005d48c lui asmTemp,0x8015
0x0005d490 lh v1,0x57e6(asmTemp)
0x0005d494 nop
0x0005d498 slti asmTemp,v1,0x02bc
0x0005d49c bne asmTemp,r0,0x0005d59c
0x0005d4a0 addu a0,v1,r0
0x0005d4a4 addiu asmTemp,r0,0x03e7
0x0005d4a8 bne a0,asmTemp,0x0005d4e4
0x0005d4ac nop
0x0005d4b0 lui v1,0x6666
0x0005d4b4 ori v1,v1,0x6667
0x0005d4b8 mult v1,v0
0x0005d4bc srl a0,v0,0x1f
0x0005d4c0 mfhi v1
0x0005d4c4 sra v1,v1,0x01
0x0005d4c8 addu v1,v1,a0
0x0005d4cc sll v1,v1,0x10
0x0005d4d0 sra v1,v1,0x10
0x0005d4d4 sub v0,v0,v1
0x0005d4d8 sll v0,v0,0x10
0x0005d4dc beq r0,r0,0x0005d59c
0x0005d4e0 sra v0,v0,0x10
0x0005d4e4 slti asmTemp,a0,0x0384
0x0005d4e8 bne asmTemp,r0,0x0005d52c
0x0005d4ec nop
0x0005d4f0 sll v1,v0,0x04
0x0005d4f4 sub a0,v1,v0
0x0005d4f8 lui v1,0x51eb
0x0005d4fc ori v1,v1,0x851f
0x0005d500 mult v1,a0
0x0005d504 mfhi v1
0x0005d508 srl a0,a0,0x1f
0x0005d50c sra v1,v1,0x05
0x0005d510 addu v1,v1,a0
0x0005d514 sll v1,v1,0x10
0x0005d518 sra v1,v1,0x10
0x0005d51c sub v0,v0,v1
0x0005d520 sll v0,v0,0x10
0x0005d524 beq r0,r0,0x0005d59c
0x0005d528 sra v0,v0,0x10
0x0005d52c slti asmTemp,a0,0x0320
0x0005d530 bne asmTemp,r0,0x0005d56c
0x0005d534 nop
0x0005d538 lui v1,0x6666
0x0005d53c ori v1,v1,0x6667
0x0005d540 mult v1,v0
0x0005d544 srl a0,v0,0x1f
0x0005d548 mfhi v1
0x0005d54c sra v1,v1,0x02
0x0005d550 addu v1,v1,a0
0x0005d554 sll v1,v1,0x10
0x0005d558 sra v1,v1,0x10
0x0005d55c sub v0,v0,v1
0x0005d560 sll v0,v0,0x10
0x0005d564 beq r0,r0,0x0005d59c
0x0005d568 sra v0,v0,0x10
0x0005d56c lui v1,0x6666
0x0005d570 ori v1,v1,0x6667
0x0005d574 mult v1,v0
0x0005d578 srl a0,v0,0x1f
0x0005d57c mfhi v1
0x0005d580 sra v1,v1,0x03
0x0005d584 addu v1,v1,a0
0x0005d588 sll v1,v1,0x10
0x0005d58c sra v1,v1,0x10
0x0005d590 sub v0,v0,v1
0x0005d594 sll v0,v0,0x10
0x0005d598 sra v0,v0,0x10
0x0005d59c lui asmTemp,0x8014
0x0005d5a0 lw v1,-0x7ba0(asmTemp)
0x0005d5a4 nop
0x0005d5a8 andi v1,v1,0x0060
0x0005d5ac beq v1,r0,0x0005d5d8
0x0005d5b0 nop
0x0005d5b4 bgez v0,0x0005d5c4
0x0005d5b8 sra t9,v0,0x01
0x0005d5bc addiu v1,v0,0x0001
0x0005d5c0 sra t9,v1,0x01
0x0005d5c4 sll v1,t9,0x10
0x0005d5c8 sra v1,v1,0x10
0x0005d5cc add v0,v0,v1
0x0005d5d0 sll v0,v0,0x10
0x0005d5d4 sra v0,v0,0x10
0x0005d5d8 lh v1,0x004e(s0)
0x0005d5dc nop
0x0005d5e0 slt asmTemp,v1,v0
0x0005d5e4 bne asmTemp,r0,0x0005d5f4
0x0005d5e8 addu v0,r0,r0
0x0005d5ec beq r0,r0,0x0005d5f4
0x0005d5f0 addiu v0,r0,0x0001
0x0005d5f4 lw ra,0x0018(sp)
0x0005d5f8 lw s1,0x0014(sp)
0x0005d5fc lw s0,0x0010(sp)
0x0005d600 jr ra
0x0005d604 addiu sp,sp,0x0020