void setConditionAnimation() {
  conditionFlags = load(0x138460)
  activeAnim = load(0x1557D6)
  conditionFlags = conditionFlags
  
  if(conditionFlags == 0) {
    happiness = load(0x13848A)
    
    if(happiness < -30) {
      store(0x134E2C, 7)
      return
    }
    else if(happiness > 30) {
      store(0x134E2C, 5)
      return
    }
    
    setIdleAnimation()
  }
  else {
    newAnim = 0
    
    if(conditionFlags & 0x0060 != 0) // injured or sick
      newAnim = 0x0E
    else if(conditionFlags & 0x0008 != 0) // has to poop
      newAnim = 0x10
    else if(conditionFlags & 0x0004 != 0) // hungry
      newAnim = 0x0F
    else if(conditionFlags & 0x0002 != 0) // tired
      newAnim = 0x12
    else if(conditionFlags & 0x0001 != 0) // sleepy
      newAnim = 0x11
    else if(conditionFlags & 0x0010 != 0) // unhappy
      newAnim = 0x13
    
    if(newAnim != 0 && activeAnim != newAnim)
      store(0x134E2C, newAnim)
  }
}

0x000df2d0 lui asmTemp,0x8014
0x000df2d4 lw v0,-0x7ba0(asmTemp)
0x000df2d8 addiu sp,sp,0xffe8
0x000df2dc lui asmTemp,0x8015
0x000df2e0 lbu a0,0x57d6(asmTemp)
0x000df2e4 sw ra,0x0010(sp)
0x000df2e8 bne v0,r0,0x000df33c
0x000df2ec addu v1,v0,r0
0x000df2f0 lui asmTemp,0x8014
0x000df2f4 lh v0,-0x7b76(asmTemp)
0x000df2f8 nop
0x000df2fc slti asmTemp,v0,-0x001e
0x000df300 beq asmTemp,r0,0x000df314
0x000df304 addu v1,v0,r0
0x000df308 addiu v0,r0,0x0007
0x000df30c beq r0,r0,0x000df41c
0x000df310 sb v0,-0x6d00(gp)
0x000df314 slti asmTemp,v1,0x001f
0x000df318 bne asmTemp,r0,0x000df32c
0x000df31c nop
0x000df320 addiu v0,r0,0x0005
0x000df324 beq r0,r0,0x000df41c
0x000df328 sb v0,-0x6d00(gp)
0x000df32c jal 0x000df42c
0x000df330 nop
0x000df334 beq r0,r0,0x000df420
0x000df338 lw ra,0x0010(sp)
0x000df33c andi v0,v1,0x0020
0x000df340 bne v0,r0,0x000df354
0x000df344 nop
0x000df348 andi v0,v1,0x0040
0x000df34c beq v0,r0,0x000df36c
0x000df350 nop
0x000df354 addiu asmTemp,r0,0x000e
0x000df358 beq a0,asmTemp,0x000df41c
0x000df35c nop
0x000df360 addiu v0,r0,0x000e
0x000df364 beq r0,r0,0x000df41c
0x000df368 sb v0,-0x6d00(gp)
0x000df36c andi v0,v1,0x0008
0x000df370 beq v0,r0,0x000df390
0x000df374 nop
0x000df378 addiu asmTemp,r0,0x0010
0x000df37c beq a0,asmTemp,0x000df41c
0x000df380 nop
0x000df384 addiu v0,r0,0x0010
0x000df388 beq r0,r0,0x000df41c
0x000df38c sb v0,-0x6d00(gp)
0x000df390 andi v0,v1,0x0004
0x000df394 beq v0,r0,0x000df3b4
0x000df398 nop
0x000df39c addiu asmTemp,r0,0x000f
0x000df3a0 beq a0,asmTemp,0x000df41c
0x000df3a4 nop
0x000df3a8 addiu v0,r0,0x000f
0x000df3ac beq r0,r0,0x000df41c
0x000df3b0 sb v0,-0x6d00(gp)
0x000df3b4 andi v0,v1,0x0002
0x000df3b8 beq v0,r0,0x000df3d8
0x000df3bc nop
0x000df3c0 addiu asmTemp,r0,0x0012
0x000df3c4 beq a0,asmTemp,0x000df41c
0x000df3c8 nop
0x000df3cc addiu v0,r0,0x0012
0x000df3d0 beq r0,r0,0x000df41c
0x000df3d4 sb v0,-0x6d00(gp)
0x000df3d8 andi v0,v1,0x0001
0x000df3dc beq v0,r0,0x000df3fc
0x000df3e0 nop
0x000df3e4 addiu asmTemp,r0,0x0011
0x000df3e8 beq a0,asmTemp,0x000df41c
0x000df3ec nop
0x000df3f0 addiu v0,r0,0x0011
0x000df3f4 beq r0,r0,0x000df41c
0x000df3f8 sb v0,-0x6d00(gp)
0x000df3fc andi v0,v1,0x0010
0x000df400 beq v0,r0,0x000df41c
0x000df404 nop
0x000df408 addiu asmTemp,r0,0x0013
0x000df40c beq a0,asmTemp,0x000df41c
0x000df410 nop
0x000df414 addiu v0,r0,0x0013
0x000df418 sb v0,-0x6d00(gp)
0x000df41c lw ra,0x0010(sp)
0x000df420 nop
0x000df424 jr ra
0x000df428 addiu sp,sp,0x0018