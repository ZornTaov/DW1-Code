int getRookieEvolutionTarget(digimonType) {
  score = 0
  bestScore = 0
  bestDigimon = -1
  count = 0
  
  for(i = 0; i < 6; i++) {
    targetType = load(0x12B671 + (digimonType - 1) * 11 + i)
    
    if(targetType == -1)
      continue
    
    reqFlag = load(0x12AC06 + targetType * 0x1C)
    
    isMaxCM = reqFlag & 0x10
    isMaxBattles = reqFlag & 0x01
    
    requirementScore = calculateRequirementScore(digimonType, targetType, isMaxCM, isMaxBattles, bestDigimon)
    
    if(requirementScore < 3) // Digimon not enabled
      continue
    
    // add required stats to priority score, increase counter per stat
    if(load(0x12ABEE + targetType * 0x1C) != -1) { // HP
      score += load(0x1557F0) / 10
      count++
    }
    if(load(0x12ABF0 + targetType * 0x1C) != -1) { // MP
      score += load(0x1557F2) / 10
      count++
    }
    if(load(0x12ABF2 + targetType * 0x1C) != -1) { // Offense
      score += load(0x1557E0)
      count++
    }
    if(load(0x12ABF4 + targetType * 0x1C) != -1) { // Defense
      score += load(0x1557E2)
      count++
    }
    if(load(0x12ABF6 + targetType * 0x1C) != -1) { // Speed
      score += load(0x1557E4)
      count++
    }
    if(load(0x12ABF8 + targetType * 0x1C) != -1) { // Brains
      score += load(0x1557E6)
      count++
    }
    
    // divide score by counter
    score = score / count
    
    // if the score is better than the old best, overwrite it
    // Bug: Only reset score and count when this is the case, should reset all the time
    if(bestScore < score) {
      bestScore = score
      bestDigimon = targetType
      
      count = 0
      score = 0
    }
  }
  
  if(bestDigimon != -1)
    return bestDigimon
  
  // no Digimon enabled, evolve to Numemon
  if(load(0x1384B6) >= 96)
    return 11
  
  return bestDigimon
}

0x000e2bb4 addiu sp,sp,0xffc8
0x000e2bb8 sw ra,0x0034(sp)
0x000e2bbc sw s6,0x0030(sp)
0x000e2bc0 sw s5,0x002c(sp)
0x000e2bc4 sw s4,0x0028(sp)
0x000e2bc8 sw s3,0x0024(sp)
0x000e2bcc addu s6,a0,r0
0x000e2bd0 addi v1,s6,-0x0001
0x000e2bd4 sll v0,v1,0x02
0x000e2bd8 add v0,v0,v1
0x000e2bdc sll v0,v0,0x01
0x000e2be0 sw s2,0x0020(sp)
0x000e2be4 sw s1,0x001c(sp)
0x000e2be8 add v1,v0,v1
0x000e2bec lui v0,0x8013
0x000e2bf0 sw s0,0x0018(sp)
0x000e2bf4 addiu v0,v0,0xb66c
0x000e2bf8 addu v0,v0,v1
0x000e2bfc sll s0,r0,0x10
0x000e2c00 sll s3,r0,0x10
0x000e2c04 addiu s2,v0,0x0005
0x000e2c08 addiu s4,r0,0xffff
0x000e2c0c addu s1,r0,r0
0x000e2c10 sra s0,s0,0x10
0x000e2c14 sra s3,s3,0x10
0x000e2c18 beq r0,r0,0x000e2ea4
0x000e2c1c addu s5,r0,r0
0x000e2c20 lb v0,0x0000(s2)
0x000e2c24 addiu asmTemp,r0,0xffff
0x000e2c28 bne v0,asmTemp,0x000e2c38
0x000e2c2c addu a1,v0,r0
0x000e2c30 beq r0,r0,0x000e2ea0
0x000e2c34 addiu s2,s2,0x0001
0x000e2c38 sll v0,a1,0x03
0x000e2c3c sub v0,v0,a1
0x000e2c40 sll v1,v0,0x02
0x000e2c44 lui v0,0x8013
0x000e2c48 addiu v0,v0,0xac06
0x000e2c4c addu v0,v0,v1
0x000e2c50 lb v1,0x0000(v0)
0x000e2c54 addu a0,s6,r0
0x000e2c58 sll v0,s4,0x18
0x000e2c5c sra v0,v0,0x18
0x000e2c60 sw v0,0x0010(sp)
0x000e2c64 andi v0,v1,0x0010
0x000e2c68 sra v0,v0,0x04
0x000e2c6c sll a2,v0,0x18
0x000e2c70 andi v0,v1,0x0001
0x000e2c74 sll a3,v0,0x18
0x000e2c78 sra a2,a2,0x18
0x000e2c7c jal 0x000e26b8
0x000e2c80 sra a3,a3,0x18
0x000e2c84 slti asmTemp,v0,0x0003
0x000e2c88 bne asmTemp,r0,0x000e2e9c
0x000e2c8c nop
0x000e2c90 lb a0,0x0000(s2)
0x000e2c94 addiu asmTemp,r0,0xffff
0x000e2c98 sll v0,a0,0x03
0x000e2c9c sub v0,v0,a0
0x000e2ca0 addu v1,a0,r0
0x000e2ca4 lui a0,0x8013
0x000e2ca8 sll a1,v0,0x02
0x000e2cac addiu a0,a0,0xabee
0x000e2cb0 addu a0,a0,a1
0x000e2cb4 lh a0,0x0000(a0)
0x000e2cb8 nop
0x000e2cbc beq a0,asmTemp,0x000e2d08
0x000e2cc0 addu v0,a1,r0
0x000e2cc4 lui asmTemp,0x8015
0x000e2cc8 lui a0,0x6666
0x000e2ccc lh a1,0x57f0(asmTemp)
0x000e2cd0 ori a0,a0,0x6667
0x000e2cd4 mult a0,a1
0x000e2cd8 mfhi a0
0x000e2cdc srl a1,a1,0x1f
0x000e2ce0 sra a0,a0,0x02
0x000e2ce4 addu a0,a0,a1
0x000e2ce8 sll a0,a0,0x10
0x000e2cec sra a0,a0,0x10
0x000e2cf0 add a0,s0,a0
0x000e2cf4 sll s0,a0,0x10
0x000e2cf8 addi a0,s1,0x0001
0x000e2cfc sll s1,a0,0x10
0x000e2d00 sra s0,s0,0x10
0x000e2d04 sra s1,s1,0x10
0x000e2d08 lui a0,0x8013
0x000e2d0c addiu a0,a0,0xabf0
0x000e2d10 addu a0,a0,v0
0x000e2d14 lh a0,0x0000(a0)
0x000e2d18 addiu asmTemp,r0,0xffff
0x000e2d1c beq a0,asmTemp,0x000e2d68
0x000e2d20 nop
0x000e2d24 lui asmTemp,0x8015
0x000e2d28 lui a0,0x6666
0x000e2d2c lh a1,0x57f2(asmTemp)
0x000e2d30 ori a0,a0,0x6667
0x000e2d34 mult a0,a1
0x000e2d38 mfhi a0
0x000e2d3c srl a1,a1,0x1f
0x000e2d40 sra a0,a0,0x02
0x000e2d44 addu a0,a0,a1
0x000e2d48 sll a0,a0,0x10
0x000e2d4c sra a0,a0,0x10
0x000e2d50 add a0,s0,a0
0x000e2d54 sll s0,a0,0x10
0x000e2d58 addi a0,s1,0x0001
0x000e2d5c sll s1,a0,0x10
0x000e2d60 sra s0,s0,0x10
0x000e2d64 sra s1,s1,0x10
0x000e2d68 lui a0,0x8013
0x000e2d6c addiu a0,a0,0xabf2
0x000e2d70 addu a0,a0,v0
0x000e2d74 lh a0,0x0000(a0)
0x000e2d78 addiu asmTemp,r0,0xffff
0x000e2d7c beq a0,asmTemp,0x000e2da8
0x000e2d80 nop
0x000e2d84 lui asmTemp,0x8015
0x000e2d88 lh a0,0x57e0(asmTemp)
0x000e2d8c nop
0x000e2d90 add a0,s0,a0
0x000e2d94 sll s0,a0,0x10
0x000e2d98 addi a0,s1,0x0001
0x000e2d9c sll s1,a0,0x10
0x000e2da0 sra s0,s0,0x10
0x000e2da4 sra s1,s1,0x10
0x000e2da8 lui a0,0x8013
0x000e2dac addiu a0,a0,0xabf4
0x000e2db0 addu a0,a0,v0
0x000e2db4 lh a0,0x0000(a0)
0x000e2db8 addiu asmTemp,r0,0xffff
0x000e2dbc beq a0,asmTemp,0x000e2de8
0x000e2dc0 nop
0x000e2dc4 lui asmTemp,0x8015
0x000e2dc8 lh a0,0x57e2(asmTemp)
0x000e2dcc nop
0x000e2dd0 add a0,s0,a0
0x000e2dd4 sll s0,a0,0x10
0x000e2dd8 addi a0,s1,0x0001
0x000e2ddc sll s1,a0,0x10
0x000e2de0 sra s0,s0,0x10
0x000e2de4 sra s1,s1,0x10
0x000e2de8 lui a0,0x8013
0x000e2dec addiu a0,a0,0xabf6
0x000e2df0 addu a0,a0,v0
0x000e2df4 lh a0,0x0000(a0)
0x000e2df8 addiu asmTemp,r0,0xffff
0x000e2dfc beq a0,asmTemp,0x000e2e28
0x000e2e00 nop
0x000e2e04 lui asmTemp,0x8015
0x000e2e08 lh a0,0x57e4(asmTemp)
0x000e2e0c nop
0x000e2e10 add a0,s0,a0
0x000e2e14 sll s0,a0,0x10
0x000e2e18 addi a0,s1,0x0001
0x000e2e1c sll s1,a0,0x10
0x000e2e20 sra s0,s0,0x10
0x000e2e24 sra s1,s1,0x10
0x000e2e28 lui a0,0x8013
0x000e2e2c addiu a0,a0,0xabf8
0x000e2e30 addu v0,a0,v0
0x000e2e34 lh v0,0x0000(v0)
0x000e2e38 addiu asmTemp,r0,0xffff
0x000e2e3c beq v0,asmTemp,0x000e2e68
0x000e2e40 nop
0x000e2e44 lui asmTemp,0x8015
0x000e2e48 lh v0,0x57e6(asmTemp)
0x000e2e4c nop
0x000e2e50 add v0,s0,v0
0x000e2e54 sll s0,v0,0x10
0x000e2e58 addi v0,s1,0x0001
0x000e2e5c sll s1,v0,0x10
0x000e2e60 sra s0,s0,0x10
0x000e2e64 sra s1,s1,0x10
0x000e2e68 div s0,s1
0x000e2e6c mflo v0
0x000e2e70 sll s0,v0,0x10
0x000e2e74 sra s0,s0,0x10
0x000e2e78 slt asmTemp,s3,s0
0x000e2e7c beq asmTemp,r0,0x000e2e9c
0x000e2e80 nop
0x000e2e84 sll s3,s0,0x10
0x000e2e88 sll s0,r0,0x10
0x000e2e8c addu s4,v1,r0
0x000e2e90 sra s3,s3,0x10
0x000e2e94 addu s1,r0,r0
0x000e2e98 sra s0,s0,0x10
0x000e2e9c addiu s2,s2,0x0001
0x000e2ea0 addi s5,s5,0x0001
0x000e2ea4 slti asmTemp,s5,0x0006
0x000e2ea8 bne asmTemp,r0,0x000e2c20
0x000e2eac nop
0x000e2eb0 addiu asmTemp,r0,0xffff
0x000e2eb4 bne s4,asmTemp,0x000e2ed8
0x000e2eb8 nop
0x000e2ebc lui asmTemp,0x8014
0x000e2ec0 lh v0,-0x7b4a(asmTemp)
0x000e2ec4 nop
0x000e2ec8 slti asmTemp,v0,0x0060
0x000e2ecc bne asmTemp,r0,0x000e2ed8
0x000e2ed0 nop
0x000e2ed4 addiu s4,r0,0x000b
0x000e2ed8 sll v0,s4,0x10
0x000e2edc lw ra,0x0034(sp)
0x000e2ee0 lw s6,0x0030(sp)
0x000e2ee4 lw s5,0x002c(sp)
0x000e2ee8 lw s4,0x0028(sp)
0x000e2eec lw s3,0x0024(sp)
0x000e2ef0 lw s2,0x0020(sp)
0x000e2ef4 lw s1,0x001c(sp)
0x000e2ef8 lw s0,0x0018(sp)
0x000e2efc sra v0,v0,0x10
0x000e2f00 jr ra
0x000e2f04 addiu sp,sp,0x0038