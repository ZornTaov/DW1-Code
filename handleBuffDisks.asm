void handleBuffDisks(int itemId) {

  if(load(0x1557F4) == 0) // check current HP
      return
  
  maxOffense = max(load(0x13D614) * 1.3, 999) // offense at start of battle
  maxDefense = max(load(0x13D616) * 1.3, 999) // defense at start of battle
  maxSpeed = max(load(0x13D618) * 1.3, 999) // speed at start of battle
    
  /*
   * 0x800F083C
   * 0x800F08A0
   * 0x800F0904
   * 0x800F0968
   * 0x800F09E8
   * 0x800F0A4C
   * 0x800F0AB0
   */
  switch(itemId - 15) {
    case 0:
      curOffense = load(0x1557E0) // offense
      
      if(maxOffense < curOffense + 20) 
        newOffense = maxOffense - curOffense
      else 
        newOffense = 20
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x03)
      0x0005CF3C(load(0x12F348), 0, newOffense, 0x1557E0)
      
      break
    case 1:
      curDefense = load(0x1557E0 + 2) // defense
      
      if(maxDefense < curDefense + 20) 
        newDefense = maxDefense - curDefense
      else 
        newDefense = 20
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x04)
      0x0005CF3C(load(0x12F348), 0, newDefense, 0x1557E2)
    
      break
    case 2:
      curSpeed = load(0x1557E0 + 4) // speed
      
      if(maxSpeed < curSpeed + 20) 
        newSpeed = maxSpeed - curSpeed
      else 
        newSpeed = 20
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x05)
      0x0005CF3C(load(0x12F348), 0, newSpeed, 0x1557E4)
      
      break
    case 3:
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x03)
      0x0005CF3C(load(0x12F348), 0, 20, 0x1557E0)
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x04)
      0x0005CF3C(load(0x12F348), 0, 20, 0x1557E2)
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x05)
      0x0005CF3C(load(0x12F348), 0, 20, 0x1557E4)
    
      break
    case 4:
      curOffense = load(0x1557E0) // offense
      
      if(maxOffense < curOffense + 50) 
        newOffense = maxOffense - curOffense
      else 
        newOffense = 50
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x03)
      0x0005CF3C(load(0x12F348), 0, newOffense, 0x1557E0)
      
      break
    case 5:
      curDefense = load(0x1557E0 + 2) // defense
      
      if(maxDefense < curDefense + 50) 
        newDefense = maxDefense - curDefense
      else 
        newDefense = 50
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x04)
      0x0005CF3C(load(0x12F348), 0, newDefense, 0x1557E2)
    
      break
    case 6:
      curSpeed = load(0x1557E0 + 4) // speed
      
      if(maxSpeed < curSpeed + 50) 
        newSpeed = maxSpeed - curSpeed
      else 
        newSpeed = 50
      
      store(stack + 0x10, 0x0B)
      store(stack + 0x14, 0x05)
      0x0005CF3C(load(0x12F348), 0, newSpeed, 0x1557E4)
      break
  }
  
  0x000721FC(load(0x12F348))
}

0x000f06f0 addiu sp,sp,0xffe0
0x000f06f4 lui asmTemp,0x8015
0x000f06f8 sw ra,0x001c(sp)
0x000f06fc lh v0,0x57f4(asmTemp)
0x000f0700 nop
0x000f0704 beq v0,r0,0x000f0b1c
0x000f0708 sw s0,0x0018(sp)
0x000f070c lui asmTemp,0x8014
0x000f0710 lh a1,-0x29ec(asmTemp)
0x000f0714 nop
0x000f0718 sll v0,a1,0x01
0x000f071c add v1,v0,a1
0x000f0720 lui v0,0x6666
0x000f0724 ori v0,v0,0x6667
0x000f0728 mult v0,v1
0x000f072c mfhi v0
0x000f0730 srl v1,v1,0x1f
0x000f0734 sra v0,v0,0x02
0x000f0738 addu v0,v0,v1
0x000f073c add v0,a1,v0
0x000f0740 sll v0,v0,0x10
0x000f0744 sra v0,v0,0x10
0x000f0748 slti asmTemp,v0,0x03e8
0x000f074c bne asmTemp,r0,0x000f0760
0x000f0750 nop
0x000f0754 addiu v0,r0,0x03e7
0x000f0758 sll v0,v0,0x10
0x000f075c sra v0,v0,0x10
0x000f0760 lui asmTemp,0x8014
0x000f0764 lh a2,-0x29ea(asmTemp)
0x000f0768 nop
0x000f076c sll v1,a2,0x01
0x000f0770 add a1,v1,a2
0x000f0774 lui v1,0x6666
0x000f0778 ori v1,v1,0x6667
0x000f077c mult v1,a1
0x000f0780 mfhi v1
0x000f0784 srl a1,a1,0x1f
0x000f0788 sra v1,v1,0x02
0x000f078c addu v1,v1,a1
0x000f0790 add v1,a2,v1
0x000f0794 sll v1,v1,0x10
0x000f0798 sra v1,v1,0x10
0x000f079c slti asmTemp,v1,0x03e8
0x000f07a0 bne asmTemp,r0,0x000f07b4
0x000f07a4 nop
0x000f07a8 addiu v1,r0,0x03e7
0x000f07ac sll v1,v1,0x10
0x000f07b0 sra v1,v1,0x10
0x000f07b4 lui asmTemp,0x8014
0x000f07b8 lh a3,-0x29e8(asmTemp)
0x000f07bc nop
0x000f07c0 sll a1,a3,0x01
0x000f07c4 add a2,a1,a3
0x000f07c8 lui a1,0x6666
0x000f07cc ori a1,a1,0x6667
0x000f07d0 mult a1,a2
0x000f07d4 mfhi a1
0x000f07d8 srl a2,a2,0x1f
0x000f07dc sra a1,a1,0x02
0x000f07e0 addu a1,a1,a2
0x000f07e4 add a1,a3,a1
0x000f07e8 sll a2,a1,0x10
0x000f07ec sra a2,a2,0x10
0x000f07f0 slti asmTemp,a2,0x03e8
0x000f07f4 bne asmTemp,r0,0x000f0808
0x000f07f8 nop
0x000f07fc addiu a1,r0,0x03e7
0x000f0800 sll a2,a1,0x10
0x000f0804 sra a2,a2,0x10
0x000f0808 lui s0,0x8015
0x000f080c addi a0,a0,-0x000f
0x000f0810 sltiu asmTemp,a0,0x0007
0x000f0814 beq asmTemp,r0,0x000f0b0c
0x000f0818 addiu s0,s0,0x57e0
0x000f081c lui a1,0x8011
0x000f0820 addiu a1,a1,0x5200
0x000f0824 sll a0,a0,0x02
0x000f0828 addu a0,a0,a1
0x000f082c lw a0,0x0000(a0)
0x000f0830 nop
0x000f0834 jr a0
0x000f0838 nop
0x000f083c lh v1,0x0000(s0)
0x000f0840 nop
0x000f0844 addu a0,v1,r0
0x000f0848 addi v1,v1,0x0014
0x000f084c slt asmTemp,v0,v1
0x000f0850 beq asmTemp,r0,0x000f0868
0x000f0854 addu a1,v0,r0
0x000f0858 sub v0,a1,a0
0x000f085c sll a2,v0,0x10
0x000f0860 beq r0,r0,0x000f0874
0x000f0864 sra a2,a2,0x10
0x000f0868 addiu v0,r0,0x0014
0x000f086c sll a2,v0,0x10
0x000f0870 sra a2,a2,0x10
0x000f0874 addiu v0,r0,0x000b
0x000f0878 sw v0,0x0010(sp)
0x000f087c addiu v0,r0,0x0003
0x000f0880 sw v0,0x0014(sp)
0x000f0884 lui asmTemp,0x8013
0x000f0888 lw a0,-0x0cb8(asmTemp)
0x000f088c addu a1,r0,r0
0x000f0890 jal 0x0005cf3c
0x000f0894 addu a3,s0,r0
0x000f0898 beq r0,r0,0x000f0b0c
0x000f089c nop
0x000f08a0 lh v0,0x0002(s0)
0x000f08a4 nop
0x000f08a8 addu a0,v0,r0
0x000f08ac addi v0,v0,0x0014
0x000f08b0 slt asmTemp,v1,v0
0x000f08b4 beq asmTemp,r0,0x000f08cc
0x000f08b8 addu a1,v1,r0
0x000f08bc sub v0,a1,a0
0x000f08c0 sll a2,v0,0x10
0x000f08c4 beq r0,r0,0x000f08d8
0x000f08c8 sra a2,a2,0x10
0x000f08cc addiu v0,r0,0x0014
0x000f08d0 sll a2,v0,0x10
0x000f08d4 sra a2,a2,0x10
0x000f08d8 addiu v0,r0,0x000b
0x000f08dc sw v0,0x0010(sp)
0x000f08e0 addiu v0,r0,0x0004
0x000f08e4 sw v0,0x0014(sp)
0x000f08e8 lui asmTemp,0x8013
0x000f08ec lw a0,-0x0cb8(asmTemp)
0x000f08f0 addu a1,r0,r0
0x000f08f4 jal 0x0005cf3c
0x000f08f8 addiu a3,s0,0x0002
0x000f08fc beq r0,r0,0x000f0b0c
0x000f0900 nop
0x000f0904 lh v0,0x0004(s0)
0x000f0908 nop
0x000f090c addu v1,v0,r0
0x000f0910 addi v0,v0,0x0014
0x000f0914 slt asmTemp,a2,v0
0x000f0918 beq asmTemp,r0,0x000f0930
0x000f091c addu a0,a2,r0
0x000f0920 sub v0,a0,v1
0x000f0924 sll a2,v0,0x10
0x000f0928 beq r0,r0,0x000f093c
0x000f092c sra a2,a2,0x10
0x000f0930 addiu v0,r0,0x0014
0x000f0934 sll a2,v0,0x10
0x000f0938 sra a2,a2,0x10
0x000f093c addiu v0,r0,0x000b
0x000f0940 sw v0,0x0010(sp)
0x000f0944 addiu v0,r0,0x0005
0x000f0948 sw v0,0x0014(sp)
0x000f094c lui asmTemp,0x8013
0x000f0950 lw a0,-0x0cb8(asmTemp)
0x000f0954 addu a1,r0,r0
0x000f0958 jal 0x0005cf3c
0x000f095c addiu a3,s0,0x0004
0x000f0960 beq r0,r0,0x000f0b0c
0x000f0964 nop
0x000f0968 addiu v0,r0,0x000b
0x000f096c sw v0,0x0010(sp)
0x000f0970 addiu v0,r0,0x0003
0x000f0974 sw v0,0x0014(sp)
0x000f0978 lui asmTemp,0x8013
0x000f097c lw a0,-0x0cb8(asmTemp)
0x000f0980 addu a1,r0,r0
0x000f0984 addiu a2,r0,0x0014
0x000f0988 jal 0x0005cf3c
0x000f098c addu a3,s0,r0
0x000f0990 addiu v0,r0,0x000b
0x000f0994 sw v0,0x0010(sp)
0x000f0998 addiu v0,r0,0x0004
0x000f099c sw v0,0x0014(sp)
0x000f09a0 lui asmTemp,0x8013
0x000f09a4 lw a0,-0x0cb8(asmTemp)
0x000f09a8 addu a1,r0,r0
0x000f09ac addiu a2,r0,0x0014
0x000f09b0 jal 0x0005cf3c
0x000f09b4 addiu a3,s0,0x0002
0x000f09b8 addiu v0,r0,0x000b
0x000f09bc sw v0,0x0010(sp)
0x000f09c0 addiu v0,r0,0x0005
0x000f09c4 sw v0,0x0014(sp)
0x000f09c8 lui asmTemp,0x8013
0x000f09cc lw a0,-0x0cb8(asmTemp)
0x000f09d0 addu a1,r0,r0
0x000f09d4 addiu a2,r0,0x0014
0x000f09d8 jal 0x0005cf3c
0x000f09dc addiu a3,s0,0x0004
0x000f09e0 beq r0,r0,0x000f0b0c
0x000f09e4 nop
0x000f09e8 lh v1,0x0000(s0)
0x000f09ec nop
0x000f09f0 addu a0,v1,r0
0x000f09f4 addi v1,v1,0x0032
0x000f09f8 slt asmTemp,v0,v1
0x000f09fc beq asmTemp,r0,0x000f0a14
0x000f0a00 addu a1,v0,r0
0x000f0a04 sub v0,a1,a0
0x000f0a08 sll a2,v0,0x10
0x000f0a0c beq r0,r0,0x000f0a20
0x000f0a10 sra a2,a2,0x10
0x000f0a14 addiu v0,r0,0x0032
0x000f0a18 sll a2,v0,0x10
0x000f0a1c sra a2,a2,0x10
0x000f0a20 addiu v0,r0,0x000b
0x000f0a24 sw v0,0x0010(sp)
0x000f0a28 addiu v0,r0,0x0003
0x000f0a2c sw v0,0x0014(sp)
0x000f0a30 lui asmTemp,0x8013
0x000f0a34 lw a0,-0x0cb8(asmTemp)
0x000f0a38 addu a1,r0,r0
0x000f0a3c jal 0x0005cf3c
0x000f0a40 addu a3,s0,r0
0x000f0a44 beq r0,r0,0x000f0b0c
0x000f0a48 nop
0x000f0a4c lh v0,0x0002(s0)
0x000f0a50 nop
0x000f0a54 addu a0,v0,r0
0x000f0a58 addi v0,v0,0x0032
0x000f0a5c slt asmTemp,v1,v0
0x000f0a60 beq asmTemp,r0,0x000f0a78
0x000f0a64 addu a1,v1,r0
0x000f0a68 sub v0,a1,a0
0x000f0a6c sll a2,v0,0x10
0x000f0a70 beq r0,r0,0x000f0a84
0x000f0a74 sra a2,a2,0x10
0x000f0a78 addiu v0,r0,0x0032
0x000f0a7c sll a2,v0,0x10
0x000f0a80 sra a2,a2,0x10
0x000f0a84 addiu v0,r0,0x000b
0x000f0a88 sw v0,0x0010(sp)
0x000f0a8c addiu v0,r0,0x0004
0x000f0a90 sw v0,0x0014(sp)
0x000f0a94 lui asmTemp,0x8013
0x000f0a98 lw a0,-0x0cb8(asmTemp)
0x000f0a9c addu a1,r0,r0
0x000f0aa0 jal 0x0005cf3c
0x000f0aa4 addiu a3,s0,0x0002
0x000f0aa8 beq r0,r0,0x000f0b0c
0x000f0aac nop
0x000f0ab0 lh v0,0x0004(s0)
0x000f0ab4 nop
0x000f0ab8 addu v1,v0,r0
0x000f0abc addi v0,v0,0x0032
0x000f0ac0 slt asmTemp,a2,v0
0x000f0ac4 beq asmTemp,r0,0x000f0adc
0x000f0ac8 addu a0,a2,r0
0x000f0acc sub v0,a0,v1
0x000f0ad0 sll a2,v0,0x10
0x000f0ad4 beq r0,r0,0x000f0ae8
0x000f0ad8 sra a2,a2,0x10
0x000f0adc addiu v0,r0,0x0032
0x000f0ae0 sll a2,v0,0x10
0x000f0ae4 sra a2,a2,0x10
0x000f0ae8 addiu v0,r0,0x000b
0x000f0aec sw v0,0x0010(sp)
0x000f0af0 addiu v0,r0,0x0005
0x000f0af4 sw v0,0x0014(sp)
0x000f0af8 lui asmTemp,0x8013
0x000f0afc lw a0,-0x0cb8(asmTemp)
0x000f0b00 addu a1,r0,r0
0x000f0b04 jal 0x0005cf3c
0x000f0b08 addiu a3,s0,0x0004
0x000f0b0c lui asmTemp,0x8013
0x000f0b10 lw a0,-0x0cb8(asmTemp)
0x000f0b14 jal 0x000721fc
0x000f0b18 nop
0x000f0b1c lw ra,0x001c(sp)
0x000f0b20 lw s0,0x0018(sp)
0x000f0b24 jr ra
0x000f0b28 addiu sp,sp,0x0020