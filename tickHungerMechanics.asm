void tickHungerMechanics() {
  digimonType = load(0x1557A8)
  currentFrame = load(0x134F08)
  previousFrame = load(0x134F06)
  
  // reduce starvation/hungry timer
  if(load(0x138460) & 0x04 != 0 && currentFrame % 10 == 0 && currentFrame != previousFrame) // is hungry
    store(0x1384A0, load(0x1384A0)) - 1 // starvation timer
  else if(currentFrame % 20 == 0 && currentFrame != previousFrame)
    store(0x13849E, load(0x13849E) - 1) // hungry timer
  
  // reduce energy every hour
  if(currentFrame % 1200 == 0 && currentFrame != previousFrame) {
    energyUsage = load(0x1225C6 + digimonType * 28)
    newEnergyLevel = load(0x13849C) - energyUsage
    store(0x13849C, newEnergyLevel < 0 ? 0 : newEnergyLevel)
  }
  
  // set hungry condition
  if(load(0x138460) & 0x04 == 0 && load(0x13849E) <= 0) {
    store(0x1384A0, 180) // starvation timer
    store(0x138460, load(0x138460) | 0x04) // set hungry condition
    handleConditionBubbles()
  }
  
  // food timer ran out
  if(load(0x138460) & 0x04 != 0 && load(0x1384A0) <= 0) {
    setFoodTimer(digimonType)
    
    store(0x1384A0, 0) // starvation timer
    store(0x138460, load(0x138460) & 0xFFFB) // unset hungry condition
    
    energyLevel = load(0x13849C)
    energyThreshold = load(0x1225C5 + digimonType * 28)
    
    if(energyLevel < energyThreshold)
      store(0x1384B2, load(0x1384B2) + 1) // add care mistake
  }
  
  // energy level is at 0
  if(load(0x13849C) <= 0) {
    // weight reduction from starvation
    if(currentFrame % 200 == 0) {
      newWeight = load(0x1384A2) - 1
      store(0x1384A2, newWeight <= 0 ? 1 : newWeight)
    }
    
    if(currentFrame % 20 == 0 && currentFrame != previousFrame)
      store(0x1384A6, load(0x1384A6) + 1) // unknown, minutes with 0 energy
  }
  
  // tiredness hunger value
  if(load(0x138486) >= 50 && currentFrame % 1200 == 0 && currentFrame != previousFrame)
    store(0x13849E, load(0x13849E) - 3)
  
  // set trigger 640, energy level was over threshold once
  energyThreshold = load(0x1225C5 + digimonType * 28)
  energyLevel = load(0x13849C)
  
  if(energyLevel >= energyThreshold)
    setTrigger(640)
}

0x000a75dc addiu sp,sp,0xffe8
0x000a75e0 sw ra,0x0014(sp)
0x000a75e4 sw s0,0x0010(sp)
0x000a75e8 lui asmTemp,0x8015
0x000a75ec lw s0,0x57a8(asmTemp)
0x000a75f0 lui asmTemp,0x8014
0x000a75f4 lw v0,-0x7ba0(asmTemp)
0x000a75f8 nop
0x000a75fc andi v0,v0,0x0004
0x000a7600 beq v0,r0,0x000a764c
0x000a7604 nop
0x000a7608 lhu v1,-0x6c24(gp)
0x000a760c addiu v0,r0,0x000a
0x000a7610 div v1,v0
0x000a7614 mfhi v0
0x000a7618 bne v0,r0,0x000a768c
0x000a761c addu a0,v1,r0
0x000a7620 lhu v0,-0x6c26(gp)
0x000a7624 nop
0x000a7628 beq a0,v0,0x000a768c
0x000a762c nop
0x000a7630 lui asmTemp,0x8014
0x000a7634 lh v0,-0x7b60(asmTemp)
0x000a7638 nop
0x000a763c addi v0,v0,-0x0001
0x000a7640 lui asmTemp,0x8014
0x000a7644 beq r0,r0,0x000a768c
0x000a7648 sh v0,-0x7b60(asmTemp)
0x000a764c lhu v1,-0x6c24(gp)
0x000a7650 addiu v0,r0,0x0014
0x000a7654 div v1,v0
0x000a7658 mfhi v0
0x000a765c bne v0,r0,0x000a768c
0x000a7660 addu a0,v1,r0
0x000a7664 lhu v0,-0x6c26(gp)
0x000a7668 nop
0x000a766c beq a0,v0,0x000a768c
0x000a7670 nop
0x000a7674 lui asmTemp,0x8014
0x000a7678 lh v0,-0x7b62(asmTemp)
0x000a767c nop
0x000a7680 addi v0,v0,-0x0001
0x000a7684 lui asmTemp,0x8014
0x000a7688 sh v0,-0x7b62(asmTemp)
0x000a768c lhu v1,-0x6c24(gp)
0x000a7690 addiu v0,r0,0x04b0
0x000a7694 div v1,v0
0x000a7698 mfhi v0
0x000a769c bne v0,r0,0x000a7704
0x000a76a0 addu a0,v1,r0
0x000a76a4 lhu v0,-0x6c26(gp)
0x000a76a8 nop
0x000a76ac beq a0,v0,0x000a7704
0x000a76b0 nop
0x000a76b4 sll v0,s0,0x03
0x000a76b8 sub v0,v0,s0
0x000a76bc sll v1,v0,0x02
0x000a76c0 lui v0,0x8012
0x000a76c4 addiu v0,v0,0x25c6
0x000a76c8 addu v0,v0,v1
0x000a76cc lbu v1,0x0000(v0)
0x000a76d0 lui asmTemp,0x8014
0x000a76d4 lh v0,-0x7b64(asmTemp)
0x000a76d8 nop
0x000a76dc sub v0,v0,v1
0x000a76e0 lui asmTemp,0x8014
0x000a76e4 sh v0,-0x7b64(asmTemp)
0x000a76e8 lui asmTemp,0x8014
0x000a76ec lh v0,-0x7b64(asmTemp)
0x000a76f0 nop
0x000a76f4 bgez v0,0x000a7704
0x000a76f8 nop
0x000a76fc lui asmTemp,0x8014
0x000a7700 sh r0,-0x7b64(asmTemp)
0x000a7704 lui asmTemp,0x8014
0x000a7708 lw v0,-0x7ba0(asmTemp)
0x000a770c nop
0x000a7710 andi v0,v0,0x0004
0x000a7714 bne v0,r0,0x000a775c
0x000a7718 nop
0x000a771c lui asmTemp,0x8014
0x000a7720 lh v0,-0x7b62(asmTemp)
0x000a7724 nop
0x000a7728 bgtz v0,0x000a775c
0x000a772c nop
0x000a7730 addiu v0,r0,0x00b4
0x000a7734 lui asmTemp,0x8014
0x000a7738 sh v0,-0x7b60(asmTemp)
0x000a773c lui asmTemp,0x8014
0x000a7740 lw v0,-0x7ba0(asmTemp)
0x000a7744 nop
0x000a7748 ori v0,v0,0x0004
0x000a774c lui asmTemp,0x8014
0x000a7750 sw v0,-0x7ba0(asmTemp)
0x000a7754 jal 0x000a7960
0x000a7758 nop
0x000a775c lui asmTemp,0x8014
0x000a7760 lw v0,-0x7ba0(asmTemp)
0x000a7764 nop
0x000a7768 andi v0,v0,0x0004
0x000a776c beq v0,r0,0x000a780c
0x000a7770 nop
0x000a7774 lui asmTemp,0x8014
0x000a7778 lh v0,-0x7b60(asmTemp)
0x000a777c nop
0x000a7780 bgtz v0,0x000a780c
0x000a7784 nop
0x000a7788 sll a0,s0,0x10
0x000a778c jal 0x000a4a08
0x000a7790 sra a0,a0,0x10
0x000a7794 lui asmTemp,0x8014
0x000a7798 sh r0,-0x7b60(asmTemp)
0x000a779c lui asmTemp,0x8014
0x000a77a0 lw v1,-0x7ba0(asmTemp)
0x000a77a4 addiu v0,r0,0xfffb
0x000a77a8 and v0,v1,v0
0x000a77ac lui asmTemp,0x8014
0x000a77b0 sw v0,-0x7ba0(asmTemp)
0x000a77b4 lui asmTemp,0x8014
0x000a77b8 lh a0,-0x7b64(asmTemp)
0x000a77bc lui asmTemp,0x8015
0x000a77c0 lw v1,0x57a8(asmTemp)
0x000a77c4 nop
0x000a77c8 sll v0,v1,0x03
0x000a77cc sub v0,v0,v1
0x000a77d0 sll v1,v0,0x02
0x000a77d4 lui v0,0x8012
0x000a77d8 addiu v0,v0,0x25c5
0x000a77dc addu v0,v0,v1
0x000a77e0 lbu v0,0x0000(v0)
0x000a77e4 nop
0x000a77e8 slt asmTemp,a0,v0
0x000a77ec beq asmTemp,r0,0x000a780c
0x000a77f0 nop
0x000a77f4 lui asmTemp,0x8014
0x000a77f8 lh v0,-0x7b4e(asmTemp)
0x000a77fc nop
0x000a7800 addi v0,v0,0x0001
0x000a7804 lui asmTemp,0x8014
0x000a7808 sh v0,-0x7b4e(asmTemp)
0x000a780c lui asmTemp,0x8014
0x000a7810 lh v0,-0x7b64(asmTemp)
0x000a7814 nop
0x000a7818 bgtz v0,0x000a78b0
0x000a781c nop
0x000a7820 lhu v1,-0x6c24(gp)
0x000a7824 addiu v0,r0,0x00c8
0x000a7828 div v1,v0
0x000a782c addu a1,v1,r0
0x000a7830 mfhi v0
0x000a7834 bne v0,r0,0x000a7874
0x000a7838 addu a0,v1,r0
0x000a783c lui asmTemp,0x8014
0x000a7840 lh v0,-0x7b5e(asmTemp)
0x000a7844 nop
0x000a7848 addi v0,v0,-0x0001
0x000a784c lui asmTemp,0x8014
0x000a7850 sh v0,-0x7b5e(asmTemp)
0x000a7854 lui asmTemp,0x8014
0x000a7858 lh v0,-0x7b5e(asmTemp)
0x000a785c nop
0x000a7860 bgtz v0,0x000a7874
0x000a7864 nop
0x000a7868 addiu v0,r0,0x0001
0x000a786c lui asmTemp,0x8014
0x000a7870 sh v0,-0x7b5e(asmTemp)
0x000a7874 addiu v0,r0,0x0014
0x000a7878 div a0,v0
0x000a787c mfhi v0
0x000a7880 bne v0,r0,0x000a78b0
0x000a7884 nop
0x000a7888 lhu v0,-0x6c26(gp)
0x000a788c nop
0x000a7890 beq a1,v0,0x000a78b0
0x000a7894 nop
0x000a7898 lui asmTemp,0x8014
0x000a789c lh v0,-0x7b5a(asmTemp)
0x000a78a0 nop
0x000a78a4 addi v0,v0,0x0001
0x000a78a8 lui asmTemp,0x8014
0x000a78ac sh v0,-0x7b5a(asmTemp)
0x000a78b0 lui asmTemp,0x8014
0x000a78b4 lh v0,-0x7b7a(asmTemp)
0x000a78b8 nop
0x000a78bc slti asmTemp,v0,0x0032
0x000a78c0 bne asmTemp,r0,0x000a7908
0x000a78c4 nop
0x000a78c8 lhu v1,-0x6c24(gp)
0x000a78cc addiu v0,r0,0x04b0
0x000a78d0 div v1,v0
0x000a78d4 mfhi v0
0x000a78d8 bne v0,r0,0x000a7908
0x000a78dc addu a0,v1,r0
0x000a78e0 lhu v0,-0x6c26(gp)
0x000a78e4 nop
0x000a78e8 beq a0,v0,0x000a7908
0x000a78ec nop
0x000a78f0 lui asmTemp,0x8014
0x000a78f4 lh v0,-0x7b62(asmTemp)
0x000a78f8 nop
0x000a78fc addi v0,v0,-0x0003
0x000a7900 lui asmTemp,0x8014
0x000a7904 sh v0,-0x7b62(asmTemp)
0x000a7908 lui asmTemp,0x8015
0x000a790c lw v1,0x57a8(asmTemp)
0x000a7910 nop
0x000a7914 sll v0,v1,0x03
0x000a7918 sub v0,v0,v1
0x000a791c sll v1,v0,0x02
0x000a7920 lui v0,0x8012
0x000a7924 addiu v0,v0,0x25c5
0x000a7928 addu v0,v0,v1
0x000a792c lbu v1,0x0000(v0)
0x000a7930 lui asmTemp,0x8014
0x000a7934 lh v0,-0x7b64(asmTemp)
0x000a7938 nop
0x000a793c slt asmTemp,v0,v1
0x000a7940 bne asmTemp,r0,0x000a7950
0x000a7944 nop
0x000a7948 jal 0x001065c0
0x000a794c addiu a0,r0,0x0280
0x000a7950 lw ra,0x0014(sp)
0x000a7954 lw s0,0x0010(sp)
0x000a7958 jr ra
0x000a795c addiu sp,sp,0x0018