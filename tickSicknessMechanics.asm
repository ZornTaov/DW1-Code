void tickSicknessMechanics() {
  isSick = load(0x138460) & 0x0040 // sick
  currentFrame = load(0x134F08)
  previousFrame = load(0x134F06)
  
  // insomnia counter >= 10, every hour, not already sick
  if(load(0x138472) >= 10 && currentFrame % 1200 == 0 && currentFrame != previousFrame && isSick == 0) {
    sicknessTries = load(0x138492) + 1
    store(0x138492, sicknessTries)
    
    // this makes it always positive
    sicknessChance = (load(0x138482) + sicknessTries * 5 - 100) & 0xFF // tiredness
    
    if(random(100) < sicknessChance) {
      store(0x138460, load(0x138460) | 0x40) // set sick
      store(0x138490, load(0x138490) + 1) // getting sick count
      store(0x138496, 1) // sickness timer
      store(0x13848A, load(0x13848A) - 20) // happiness
      store(0x138472, 0) // reset insomnia counter
    }
  }
  
  if(isSick == 0 
  && load(0x138494) > 12000 && load(0x150C3E) == 2 // area effect timer and dislikes area
  && currentFrame % 1200 == 0 && currentFrame != previousFrame) {
    store(0x138460, load(0x138460) | 0x40) // set sick
    store(0x138490, load(0x138490) + 1) // getting sick count
    store(0x138496, 1) // sickness timer
    store(0x138494, 0) // area effect timer
  }
  
  // is sick and an hour passed
  if(currentFrame % 1200 == 0 && currentFrame != previousFrame && load(0x138460) & 0x40 != 0) {
    store(0x13848A, load(0x13848A) - 10) // happiness
    store(0x138488, load(0x138488) - 5) // discipline
    store(0x138482, load(0x138482) + 5) // tiredness
  }
  
  // isn't sick, reset sickness timer
  if(isSick == 0 && load(0x138496) > 0)
    store(0x138496, 0)
  
  // advance sickness and injury timer
  if(currentFrame % 1200 == 0 && currentFrame != previousFrame) {
    if(load(0x138460) & 0x40 != 0) // is sick
      store(0x138496, load(0x138496) + 1) // sickness timer
    
    if(load(0x138460) & 0x20 != 0) // is injured
      store(0x138498, load(0x138498) + 1) // injured timer
  }
  
  // check transformation lock hour
  if(load(0x134CA8) == 1 && load(0x134CA4) == load(0x134EBC))
    return
  
  // get sick from injury
  if(load(0x138498) >= 12 && isSick == 0 && loadMenuState() == 0) {
    store(0x138460, (load(0x138460) | 0x40) & 0xFFDF) // set sick, unset injured
    store(0x138490, load(0x138490) + 1) // getting sick count
    store(0x138496, 1) // sickness timer
    store(0x138498, 0) // injured timer
  }
  
  // got sick during this tick
  if(isSick == 0 && load(0x138460) & 0x40 != 0) {
    setMenuState(20)
    clearTextArea()
    
    setTextColor(10)
    renderString(0x155810, 0, 0x78) // render Digimon name
    
    nameLength = strlen(0x155810) / 2 // length of Digimon name
    
    setTextColor(1)
    renderString(0x1225A0, nameLength * 12, 0x78) // "is sick!"
  }
  
  // die from sickness
  if(load(0x138496) >= 12     // sickness timer
  && load(0x134C5B) != 8      // "digimon state"
  && loadMenuState() == 0
  && load(0x1384A8) != 0      // remaining lifetime
  && load(0x134FF4) == 1) {   // isScriptPaused
  
    writePStat(255, 0)
    store(0x155824, load(0x155824) - 1) // lives
    callScriptSection(0, 0x4DE, 0)
    store(0x138496, 0) // sickness timer
  }
}

0x000a856c addiu sp,sp,0xffe0
0x000a8570 sw ra,0x0018(sp)
0x000a8574 lui asmTemp,0x8014
0x000a8578 sw s1,0x0014(sp)
0x000a857c lw v0,-0x7ba0(asmTemp)
0x000a8580 sw s0,0x0010(sp)
0x000a8584 andi s0,v0,0x0040
0x000a8588 lui asmTemp,0x8014
0x000a858c lh v0,-0x7b8e(asmTemp)
0x000a8590 nop
0x000a8594 slti asmTemp,v0,0x000a
0x000a8598 bne asmTemp,r0,0x000a868c
0x000a859c nop
0x000a85a0 lhu v1,-0x6c24(gp)
0x000a85a4 addiu v0,r0,0x04b0
0x000a85a8 div v1,v0
0x000a85ac mfhi v0
0x000a85b0 bne v0,r0,0x000a868c
0x000a85b4 addu a0,v1,r0
0x000a85b8 lhu v0,-0x6c26(gp)
0x000a85bc nop
0x000a85c0 beq a0,v0,0x000a868c
0x000a85c4 nop
0x000a85c8 bne s0,r0,0x000a868c
0x000a85cc nop
0x000a85d0 lui asmTemp,0x8014
0x000a85d4 lh v0,-0x7b6e(asmTemp)
0x000a85d8 nop
0x000a85dc addi v0,v0,0x0001
0x000a85e0 lui asmTemp,0x8014
0x000a85e4 sh v0,-0x7b6e(asmTemp)
0x000a85e8 lui asmTemp,0x8014
0x000a85ec lh v0,-0x7b6e(asmTemp)
0x000a85f0 nop
0x000a85f4 addi a0,v0,-0x000a
0x000a85f8 lui asmTemp,0x8014
0x000a85fc lh v0,-0x7b7e(asmTemp)
0x000a8600 sll v1,a0,0x02
0x000a8604 add v1,v1,a0
0x000a8608 addi v0,v0,-0x0032
0x000a860c add v0,v0,v1
0x000a8610 andi s1,v0,0x00ff
0x000a8614 jal 0x000a36d4
0x000a8618 addiu a0,r0,0x0064
0x000a861c sll v0,v0,0x10
0x000a8620 sra v0,v0,0x10
0x000a8624 slt asmTemp,v0,s1
0x000a8628 beq asmTemp,r0,0x000a868c
0x000a862c nop
0x000a8630 lui asmTemp,0x8014
0x000a8634 lw v0,-0x7ba0(asmTemp)
0x000a8638 nop
0x000a863c ori v0,v0,0x0040
0x000a8640 lui asmTemp,0x8014
0x000a8644 sw v0,-0x7ba0(asmTemp)
0x000a8648 lui asmTemp,0x8014
0x000a864c lh v0,-0x7b70(asmTemp)
0x000a8650 nop
0x000a8654 addi v0,v0,0x0001
0x000a8658 lui asmTemp,0x8014
0x000a865c sh v0,-0x7b70(asmTemp)
0x000a8660 addiu v0,r0,0x0001
0x000a8664 lui asmTemp,0x8014
0x000a8668 sh v0,-0x7b6a(asmTemp)
0x000a866c lui asmTemp,0x8014
0x000a8670 lh v0,-0x7b76(asmTemp)
0x000a8674 nop
0x000a8678 addi v0,v0,-0x0014
0x000a867c lui asmTemp,0x8014
0x000a8680 sh v0,-0x7b76(asmTemp)
0x000a8684 lui asmTemp,0x8014
0x000a8688 sh r0,-0x7b8e(asmTemp)
0x000a868c bne s0,r0,0x000a872c
0x000a8690 nop
0x000a8694 lui asmTemp,0x8014
0x000a8698 lh v0,-0x7b6c(asmTemp)
0x000a869c nop
0x000a86a0 slti asmTemp,v0,0x2ee1
0x000a86a4 bne asmTemp,r0,0x000a872c
0x000a86a8 nop
0x000a86ac lhu v1,-0x6c24(gp)
0x000a86b0 addiu v0,r0,0x04b0
0x000a86b4 div v1,v0
0x000a86b8 mfhi v0
0x000a86bc bne v0,r0,0x000a872c
0x000a86c0 addu a0,v1,r0
0x000a86c4 lhu v0,-0x6c26(gp)
0x000a86c8 nop
0x000a86cc beq a0,v0,0x000a872c
0x000a86d0 nop
0x000a86d4 lui asmTemp,0x8015
0x000a86d8 lb v0,0x0c3e(asmTemp)
0x000a86dc addiu asmTemp,r0,0x0002
0x000a86e0 bne v0,asmTemp,0x000a872c
0x000a86e4 nop
0x000a86e8 lui asmTemp,0x8014
0x000a86ec lw v0,-0x7ba0(asmTemp)
0x000a86f0 nop
0x000a86f4 ori v0,v0,0x0040
0x000a86f8 lui asmTemp,0x8014
0x000a86fc sw v0,-0x7ba0(asmTemp)
0x000a8700 lui asmTemp,0x8014
0x000a8704 lh v0,-0x7b70(asmTemp)
0x000a8708 nop
0x000a870c addi v0,v0,0x0001
0x000a8710 lui asmTemp,0x8014
0x000a8714 sh v0,-0x7b70(asmTemp)
0x000a8718 addiu v0,r0,0x0001
0x000a871c lui asmTemp,0x8014
0x000a8720 sh v0,-0x7b6a(asmTemp)
0x000a8724 lui asmTemp,0x8014
0x000a8728 sh r0,-0x7b6c(asmTemp)
0x000a872c lhu v1,-0x6c24(gp)
0x000a8730 addiu v0,r0,0x04b0
0x000a8734 div v1,v0
0x000a8738 addu a0,v1,r0
0x000a873c mfhi v0
0x000a8740 bne v0,r0,0x000a87b8
0x000a8744 addu v1,v0,r0
0x000a8748 lhu v0,-0x6c26(gp)
0x000a874c nop
0x000a8750 beq a0,v0,0x000a87b8
0x000a8754 nop
0x000a8758 lui asmTemp,0x8014
0x000a875c lw v0,-0x7ba0(asmTemp)
0x000a8760 nop
0x000a8764 andi v0,v0,0x0040
0x000a8768 beq v0,r0,0x000a87b8
0x000a876c nop
0x000a8770 lui asmTemp,0x8014
0x000a8774 lh v0,-0x7b76(asmTemp)
0x000a8778 nop
0x000a877c addi v0,v0,-0x000a
0x000a8780 lui asmTemp,0x8014
0x000a8784 sh v0,-0x7b76(asmTemp)
0x000a8788 lui asmTemp,0x8014
0x000a878c lh v0,-0x7b78(asmTemp)
0x000a8790 nop
0x000a8794 addi v0,v0,-0x0005
0x000a8798 lui asmTemp,0x8014
0x000a879c sh v0,-0x7b78(asmTemp)
0x000a87a0 lui asmTemp,0x8014
0x000a87a4 lh v0,-0x7b7e(asmTemp)
0x000a87a8 nop
0x000a87ac addi v0,v0,0x0005
0x000a87b0 lui asmTemp,0x8014
0x000a87b4 sh v0,-0x7b7e(asmTemp)
0x000a87b8 bne s0,r0,0x000a87dc
0x000a87bc nop
0x000a87c0 lui asmTemp,0x8014
0x000a87c4 lh v0,-0x7b6a(asmTemp)
0x000a87c8 nop
0x000a87cc blez v0,0x000a87dc
0x000a87d0 nop
0x000a87d4 lui asmTemp,0x8014
0x000a87d8 sh r0,-0x7b6a(asmTemp)
0x000a87dc bne v1,r0,0x000a8854
0x000a87e0 nop
0x000a87e4 lhu v0,-0x6c26(gp)
0x000a87e8 nop
0x000a87ec beq a0,v0,0x000a8854
0x000a87f0 nop
0x000a87f4 lui asmTemp,0x8014
0x000a87f8 lw v0,-0x7ba0(asmTemp)
0x000a87fc nop
0x000a8800 andi v0,v0,0x0040
0x000a8804 beq v0,r0,0x000a8824
0x000a8808 nop
0x000a880c lui asmTemp,0x8014
0x000a8810 lh v0,-0x7b6a(asmTemp)
0x000a8814 nop
0x000a8818 addi v0,v0,0x0001
0x000a881c lui asmTemp,0x8014
0x000a8820 sh v0,-0x7b6a(asmTemp)
0x000a8824 lui asmTemp,0x8014
0x000a8828 lw v0,-0x7ba0(asmTemp)
0x000a882c nop
0x000a8830 andi v0,v0,0x0020
0x000a8834 beq v0,r0,0x000a8854
0x000a8838 nop
0x000a883c lui asmTemp,0x8014
0x000a8840 lh v0,-0x7b68(asmTemp)
0x000a8844 nop
0x000a8848 addi v0,v0,0x0001
0x000a884c lui asmTemp,0x8014
0x000a8850 sh v0,-0x7b68(asmTemp)
0x000a8854 lw v0,-0x6e84(gp)
0x000a8858 addiu asmTemp,r0,0x0001
0x000a885c bne v0,asmTemp,0x000a8878
0x000a8860 nop
0x000a8864 lb v1,-0x6e88(gp)
0x000a8868 lh v0,-0x6c70(gp)
0x000a886c nop
0x000a8870 beq v1,v0,0x000a8a28
0x000a8874 nop
0x000a8878 lui asmTemp,0x8014
0x000a887c lh v0,-0x7b68(asmTemp)
0x000a8880 nop
0x000a8884 slti asmTemp,v0,0x000c
0x000a8888 bne asmTemp,r0,0x000a8904
0x000a888c nop
0x000a8890 bne s0,r0,0x000a8904
0x000a8894 nop
0x000a8898 jal 0x000ac050
0x000a889c nop
0x000a88a0 bne v0,r0,0x000a8904
0x000a88a4 nop
0x000a88a8 lui asmTemp,0x8014
0x000a88ac lw v0,-0x7ba0(asmTemp)
0x000a88b0 nop
0x000a88b4 ori v0,v0,0x0040
0x000a88b8 lui asmTemp,0x8014
0x000a88bc sw v0,-0x7ba0(asmTemp)
0x000a88c0 lui asmTemp,0x8014
0x000a88c4 lh v0,-0x7b70(asmTemp)
0x000a88c8 nop
0x000a88cc addi v0,v0,0x0001
0x000a88d0 lui asmTemp,0x8014
0x000a88d4 sh v0,-0x7b70(asmTemp)
0x000a88d8 addiu v0,r0,0x0001
0x000a88dc lui asmTemp,0x8014
0x000a88e0 sh v0,-0x7b6a(asmTemp)
0x000a88e4 lui asmTemp,0x8014
0x000a88e8 lw v1,-0x7ba0(asmTemp)
0x000a88ec addiu v0,r0,0xffdf
0x000a88f0 and v0,v1,v0
0x000a88f4 lui asmTemp,0x8014
0x000a88f8 sw v0,-0x7ba0(asmTemp)
0x000a88fc lui asmTemp,0x8014
0x000a8900 sh r0,-0x7b68(asmTemp)
0x000a8904 bne s0,r0,0x000a8994
0x000a8908 nop
0x000a890c lui asmTemp,0x8014
0x000a8910 lw v0,-0x7ba0(asmTemp)
0x000a8914 nop
0x000a8918 andi v0,v0,0x0040
0x000a891c beq v0,r0,0x000a8994
0x000a8920 nop
0x000a8924 jal 0x000aa188
0x000a8928 addiu a0,r0,0x0014
0x000a892c jal 0x0010cb90
0x000a8930 nop
0x000a8934 jal 0x0010cc0c
0x000a8938 addiu a0,r0,0x000a
0x000a893c lui a0,0x8015
0x000a8940 addiu a0,a0,0x5810
0x000a8944 addu s0,a0,r0
0x000a8948 addu a1,r0,r0
0x000a894c jal 0x0010cf24
0x000a8950 addiu a2,r0,0x0078
0x000a8954 jal 0x0009121c
0x000a8958 addu a0,s0,r0
0x000a895c bgez v0,0x000a896c
0x000a8960 sra t9,v0,0x01
0x000a8964 addiu v0,v0,0x0001
0x000a8968 sra t9,v0,0x01
0x000a896c addu s0,t9,r0
0x000a8970 jal 0x0010cc0c
0x000a8974 addiu a0,r0,0x0001
0x000a8978 sll v0,s0,0x01
0x000a897c add v0,v0,s0
0x000a8980 lui a0,0x8012
0x000a8984 sll a1,v0,0x02
0x000a8988 addiu a0,a0,0x25a0
0x000a898c jal 0x0010cf24
0x000a8990 addiu a2,r0,0x0078
0x000a8994 lui asmTemp,0x8014
0x000a8998 lh v0,-0x7b6a(asmTemp)
0x000a899c nop
0x000a89a0 slti asmTemp,v0,0x000c
0x000a89a4 bne asmTemp,r0,0x000a8a28
0x000a89a8 nop
0x000a89ac lb v0,-0x6ed1(gp)
0x000a89b0 addiu asmTemp,r0,0x0008
0x000a89b4 beq v0,asmTemp,0x000a8a28
0x000a89b8 nop
0x000a89bc jal 0x000ac050
0x000a89c0 nop
0x000a89c4 bne v0,r0,0x000a8a28
0x000a89c8 nop
0x000a89cc lui asmTemp,0x8014
0x000a89d0 lh v0,-0x7b58(asmTemp)
0x000a89d4 nop
0x000a89d8 beq v0,r0,0x000a8a28
0x000a89dc nop
0x000a89e0 lw v0,-0x6b38(gp)
0x000a89e4 addiu asmTemp,r0,0x0001
0x000a89e8 bne v0,asmTemp,0x000a8a28
0x000a89ec nop
0x000a89f0 addiu a0,r0,0x00ff
0x000a89f4 jal 0x00106474
0x000a89f8 addu a1,r0,r0
0x000a89fc lui asmTemp,0x8015
0x000a8a00 lb v0,0x5824(asmTemp)
0x000a8a04 addu a0,r0,r0
0x000a8a08 addi v0,v0,-0x0001
0x000a8a0c lui asmTemp,0x8015
0x000a8a10 sb v0,0x5824(asmTemp)
0x000a8a14 addiu a1,r0,0x04de
0x000a8a18 jal 0x00105b14
0x000a8a1c addu a2,r0,r0
0x000a8a20 lui asmTemp,0x8014
0x000a8a24 sh r0,-0x7b6a(asmTemp)
0x000a8a28 lw ra,0x0018(sp)
0x000a8a2c lw s1,0x0014(sp)
0x000a8a30 lw s0,0x0010(sp)
0x000a8a34 jr ra
0x000a8a38 addiu sp,sp,0x0020