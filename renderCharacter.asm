int renderCharacter(charVal, xPos, yPos) {
  
  if(xPos > 0xF4)
    return 0
  
  if(yPos > 0xF4)
    return 0
  
  charByte1 = charVal & 0x00FF << 8
  charByte2 = charVal & 0xFF00 >> 8
  swappedChar = (charByte2 + charByte1) & 0xFFFF
  
  store(0x13087C, swappedChar)
  
  for(charOffset = 0; load(0x1307E0 + charOffset * 2) != swappedChar; charOffset++);
  
  pixelPage = (load(0x13502C) + 1) % 50
  store(0x13502C, pixelPage)
  
  // generate pixel data
  imageDataPtr = 0x1BE958 + pixelPage * 72
  
  for(i = 0; i < 11; i++) {
    flags = load(0x130880 + charOffset * 0x18 + i * 2)
    
    value = 0
    if(flags & 0x8000 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x4000 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
    
    value = 0
    if(flags & 0x2000 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x1000 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
    
    value = 0
    if(flags & 0x0800 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x0400 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
    
    value = 0
    if(flags & 0x0200 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x0100 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
    
    value = 0
    if(flags & 0x0080 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x0040 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
    
    value = 0
    if(flags & 0x0020 == 0)
      value = (value | load(0x13465C)) & 0xFF // 1
    if(flags & 0x0010 == 0)
      value = (value | load(0x13465D)) & 0xFF // 0x10
    
    store(imageDataPtr++, value)
  }
  
  // posX, posY, width, height
  headerData[0] = xPos / 4 + 0x02C0
  headerData[1] = yPos + 0x0100
  headerData[2] = 3
  headerData[3] = 11
  
  loadImage(headerData, 0x1BE958 + pixelPage * 72)
  
  return load(0x130896 + charOffset * 0x18) // width
}

0x0010cc28 addiu sp,sp,0xffe0
0x0010cc2c sw ra,0x0014(sp)
0x0010cc30 sltiu asmTemp,a1,0x00f4
0x0010cc34 bne asmTemp,r0,0x0010cc44
0x0010cc38 sw s0,0x0010(sp)
0x0010cc3c beq r0,r0,0x0010cf14
0x0010cc40 addu v0,r0,r0
0x0010cc44 sltiu asmTemp,a2,0x00f4
0x0010cc48 bne asmTemp,r0,0x0010cc58
0x0010cc4c nop
0x0010cc50 beq r0,r0,0x0010cf14
0x0010cc54 addu v0,r0,r0
0x0010cc58 andi v0,a0,0x00ff
0x0010cc5c sll v1,v0,0x08
0x0010cc60 andi v0,a0,0xff00
0x0010cc64 sra v0,v0,0x08
0x0010cc68 add v0,v1,v0
0x0010cc6c andi a0,v0,0xffff
0x0010cc70 lui asmTemp,0x8013
0x0010cc74 sh a0,0x087c(asmTemp)
0x0010cc78 addu v1,r0,r0
0x0010cc7c addu a3,r0,r0
0x0010cc80 lui v0,0x8013
0x0010cc84 addiu v0,v0,0x07e0
0x0010cc88 addu v0,v0,a3
0x0010cc8c lhu v0,0x0000(v0)
0x0010cc90 nop
0x0010cc94 beq a0,v0,0x0010cca8
0x0010cc98 nop
0x0010cc9c addi v1,v1,0x0001
0x0010cca0 beq r0,r0,0x0010cc80
0x0010cca4 addi a3,a3,0x0002
0x0010cca8 sll v0,v1,0x01
0x0010ccac add v0,v0,v1
0x0010ccb0 sll v1,v0,0x03
0x0010ccb4 lui v0,0x8013
0x0010ccb8 addiu v0,v0,0x0880
0x0010ccbc addu s0,v0,v1
0x0010ccc0 lw v0,-0x6b00(gp)
0x0010ccc4 addu a0,r0,r0
0x0010ccc8 addi v1,v0,0x0001
0x0010cccc addiu v0,r0,0x0032
0x0010ccd0 div v1,v0
0x0010ccd4 mfhi v0
0x0010ccd8 sw v0,-0x6b00(gp)
0x0010ccdc lw v1,-0x6b00(gp)
0x0010cce0 nop
0x0010cce4 sll v0,v1,0x03
0x0010cce8 add v0,v0,v1
0x0010ccec sll v1,v0,0x03
0x0010ccf0 lui v0,0x801c
0x0010ccf4 addiu v0,v0,0xe958
0x0010ccf8 beq r0,r0,0x0010ceac
0x0010ccfc addu v0,v0,v1
0x0010cd00 lhu t0,0x0000(s0)
0x0010cd04 addiu v1,s0,0x0002
0x0010cd08 addu s0,v1,r0
0x0010cd0c addu v1,t0,r0
0x0010cd10 andi t0,t0,0x8000
0x0010cd14 bne t0,r0,0x0010cd2c
0x0010cd18 addu a3,r0,r0
0x0010cd1c lbu t0,-0x74d0(gp)
0x0010cd20 nop
0x0010cd24 or a3,a3,t0
0x0010cd28 andi a3,a3,0x00ff
0x0010cd2c andi t0,v1,0x4000
0x0010cd30 bne t0,r0,0x0010cd48
0x0010cd34 nop
0x0010cd38 lbu t0,-0x74cf(gp)
0x0010cd3c nop
0x0010cd40 or a3,a3,t0
0x0010cd44 andi a3,a3,0x00ff
0x0010cd48 addu t0,v0,r0
0x0010cd4c sb a3,0x0000(t0)
0x0010cd50 addiu v0,t0,0x0001
0x0010cd54 andi t0,v1,0x2000
0x0010cd58 bne t0,r0,0x0010cd70
0x0010cd5c addu a3,r0,r0
0x0010cd60 lbu t0,-0x74d0(gp)
0x0010cd64 nop
0x0010cd68 or a3,a3,t0
0x0010cd6c andi a3,a3,0x00ff
0x0010cd70 andi t0,v1,0x1000
0x0010cd74 bne t0,r0,0x0010cd8c
0x0010cd78 nop
0x0010cd7c lbu t0,-0x74cf(gp)
0x0010cd80 nop
0x0010cd84 or a3,a3,t0
0x0010cd88 andi a3,a3,0x00ff
0x0010cd8c addu t0,v0,r0
0x0010cd90 sb a3,0x0000(t0)
0x0010cd94 addiu v0,t0,0x0001
0x0010cd98 andi t0,v1,0x0800
0x0010cd9c bne t0,r0,0x0010cdb4
0x0010cda0 addu a3,r0,r0
0x0010cda4 lbu t0,-0x74d0(gp)
0x0010cda8 nop
0x0010cdac or a3,a3,t0
0x0010cdb0 andi a3,a3,0x00ff
0x0010cdb4 andi t0,v1,0x0400
0x0010cdb8 bne t0,r0,0x0010cdd0
0x0010cdbc nop
0x0010cdc0 lbu t0,-0x74cf(gp)
0x0010cdc4 nop
0x0010cdc8 or a3,a3,t0
0x0010cdcc andi a3,a3,0x00ff
0x0010cdd0 addu t0,v0,r0
0x0010cdd4 sb a3,0x0000(t0)
0x0010cdd8 addiu v0,t0,0x0001
0x0010cddc andi t0,v1,0x0200
0x0010cde0 bne t0,r0,0x0010cdf8
0x0010cde4 addu a3,r0,r0
0x0010cde8 lbu t0,-0x74d0(gp)
0x0010cdec nop
0x0010cdf0 or a3,a3,t0
0x0010cdf4 andi a3,a3,0x00ff
0x0010cdf8 andi t0,v1,0x0100
0x0010cdfc bne t0,r0,0x0010ce14
0x0010ce00 nop
0x0010ce04 lbu t0,-0x74cf(gp)
0x0010ce08 nop
0x0010ce0c or a3,a3,t0
0x0010ce10 andi a3,a3,0x00ff
0x0010ce14 addu t0,v0,r0
0x0010ce18 sb a3,0x0000(t0)
0x0010ce1c addiu v0,t0,0x0001
0x0010ce20 andi t0,v1,0x0080
0x0010ce24 bne t0,r0,0x0010ce3c
0x0010ce28 addu a3,r0,r0
0x0010ce2c lbu t0,-0x74d0(gp)
0x0010ce30 nop
0x0010ce34 or a3,a3,t0
0x0010ce38 andi a3,a3,0x00ff
0x0010ce3c andi t0,v1,0x0040
0x0010ce40 bne t0,r0,0x0010ce58
0x0010ce44 nop
0x0010ce48 lbu t0,-0x74cf(gp)
0x0010ce4c nop
0x0010ce50 or a3,a3,t0
0x0010ce54 andi a3,a3,0x00ff
0x0010ce58 addu t0,v0,r0
0x0010ce5c sb a3,0x0000(t0)
0x0010ce60 addiu v0,t0,0x0001
0x0010ce64 andi t0,v1,0x0020
0x0010ce68 bne t0,r0,0x0010ce80
0x0010ce6c addu a3,r0,r0
0x0010ce70 lbu t0,-0x74d0(gp)
0x0010ce74 nop
0x0010ce78 or a3,a3,t0
0x0010ce7c andi a3,a3,0x00ff
0x0010ce80 andi v1,v1,0x0010
0x0010ce84 bne v1,r0,0x0010ce9c
0x0010ce88 nop
0x0010ce8c lbu v1,-0x74cf(gp)
0x0010ce90 nop
0x0010ce94 or v1,a3,v1
0x0010ce98 andi a3,v1,0x00ff
0x0010ce9c addu v1,v0,r0
0x0010cea0 addiu v0,v1,0x0001
0x0010cea4 sb a3,0x0000(v1)
0x0010cea8 addi a0,a0,0x0001
0x0010ceac slti asmTemp,a0,0x000b
0x0010ceb0 bne asmTemp,r0,0x0010cd00
0x0010ceb4 nop
0x0010ceb8 bgez a1,0x0010cec8
0x0010cebc sra t9,a1,0x02
0x0010cec0 addiu v0,a1,0x0003
0x0010cec4 sra t9,v0,0x02
0x0010cec8 addi v0,t9,0x02c0
0x0010cecc sh v0,0x0018(sp)
0x0010ced0 addi v0,a2,0x0100
0x0010ced4 sh v0,0x001a(sp)
0x0010ced8 addiu v0,r0,0x0003
0x0010cedc sh v0,0x001c(sp)
0x0010cee0 addiu v0,r0,0x000b
0x0010cee4 lw v1,-0x6b00(gp)
0x0010cee8 sh v0,0x001e(sp)
0x0010ceec sll v0,v1,0x03
0x0010cef0 add v0,v0,v1
0x0010cef4 sll v1,v0,0x03
0x0010cef8 lui v0,0x801c
0x0010cefc addiu v0,v0,0xe958
0x0010cf00 addu a1,v0,v1
0x0010cf04 jal 0x000948a8
0x0010cf08 addiu a0,sp,0x0018
0x0010cf0c lhu v0,0x0000(s0)
0x0010cf10 nop
0x0010cf14 lw ra,0x0014(sp)
0x0010cf18 lw s0,0x0010(sp)
0x0010cf1c jr ra
0x0010cf20 addiu sp,sp,0x0020