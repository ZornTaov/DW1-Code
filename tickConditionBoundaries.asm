void tickConditionBoundaries() {
  happiness = load(0x13848A)
  
  if(happiness > 100)
    store(0x13848A, 100)
  if(happiness < -100)
    store(0x13848A, -100)
  
  discipline = load(0x138488)
  
  if(discipline > 100)
    store(0x138488, 100)
  if(discipline < 0)
    store(0x138488, 0)
    
  tiredness = load(0x138482)
  
  if(tiredness > 100)
    store(0x138482, 100)
  if(tiredness < 0)
    store(0x138482, 0)
  
  energyLevel = load(0x13849C)
  maxEnergyLevel = load(0x1225C4 + load(0x1557A8) * 28)
  
  if(energyLevel > maxEnergyLevel)
    store(0x13849C, maxEnergyLevel)
  if(energyLevel < 0)
    store(0x13849C, 0)
    
  weight = load(0x1384A2)
  
  if(weight > 99)
    store(0x1384A2, 99)
  if(weight < 1)
    store(0x1384A2, 1)
}

0x000a568c lui asmTemp,0x8014
0x000a5690 lh v0,-0x7b76(asmTemp)
0x000a5694 nop
0x000a5698 slti asmTemp,v0,0x0065
0x000a569c bne asmTemp,r0,0x000a56b0
0x000a56a0 nop
0x000a56a4 addiu v0,r0,0x0064
0x000a56a8 lui asmTemp,0x8014
0x000a56ac sh v0,-0x7b76(asmTemp)
0x000a56b0 lui asmTemp,0x8014
0x000a56b4 lh v0,-0x7b76(asmTemp)
0x000a56b8 nop
0x000a56bc slti asmTemp,v0,-0x0064
0x000a56c0 beq asmTemp,r0,0x000a56d4
0x000a56c4 nop
0x000a56c8 addiu v0,r0,0xff9c
0x000a56cc lui asmTemp,0x8014
0x000a56d0 sh v0,-0x7b76(asmTemp)
0x000a56d4 lui asmTemp,0x8014
0x000a56d8 lh v0,-0x7b78(asmTemp)
0x000a56dc nop
0x000a56e0 slti asmTemp,v0,0x0065
0x000a56e4 bne asmTemp,r0,0x000a56f8
0x000a56e8 nop
0x000a56ec addiu v0,r0,0x0064
0x000a56f0 lui asmTemp,0x8014
0x000a56f4 sh v0,-0x7b78(asmTemp)
0x000a56f8 lui asmTemp,0x8014
0x000a56fc lh v0,-0x7b78(asmTemp)
0x000a5700 nop
0x000a5704 bgez v0,0x000a5714
0x000a5708 nop
0x000a570c lui asmTemp,0x8014
0x000a5710 sh r0,-0x7b78(asmTemp)
0x000a5714 lui asmTemp,0x8014
0x000a5718 lh v0,-0x7b7e(asmTemp)
0x000a571c nop
0x000a5720 slti asmTemp,v0,0x0065
0x000a5724 bne asmTemp,r0,0x000a5738
0x000a5728 nop
0x000a572c addiu v0,r0,0x0064
0x000a5730 lui asmTemp,0x8014
0x000a5734 sh v0,-0x7b7e(asmTemp)
0x000a5738 lui asmTemp,0x8014
0x000a573c lh v0,-0x7b7e(asmTemp)
0x000a5740 nop
0x000a5744 bgez v0,0x000a5754
0x000a5748 nop
0x000a574c lui asmTemp,0x8014
0x000a5750 sh r0,-0x7b7e(asmTemp)
0x000a5754 lui asmTemp,0x8014
0x000a5758 lh a0,-0x7b64(asmTemp)
0x000a575c lui asmTemp,0x8015
0x000a5760 lw v1,0x57a8(asmTemp)
0x000a5764 nop
0x000a5768 sll v0,v1,0x03
0x000a576c sub v0,v0,v1
0x000a5770 sll v1,v0,0x02
0x000a5774 lui v0,0x8012
0x000a5778 addiu v0,v0,0x25c4
0x000a577c addu v0,v0,v1
0x000a5780 lbu v0,0x0000(v0)
0x000a5784 nop
0x000a5788 slt asmTemp,v0,a0
0x000a578c beq asmTemp,r0,0x000a579c
0x000a5790 addu v1,v0,r0
0x000a5794 lui asmTemp,0x8014
0x000a5798 sh v1,-0x7b64(asmTemp)
0x000a579c lui asmTemp,0x8014
0x000a57a0 lh v0,-0x7b64(asmTemp)
0x000a57a4 nop
0x000a57a8 bgez v0,0x000a57b8
0x000a57ac nop
0x000a57b0 lui asmTemp,0x8014
0x000a57b4 sh r0,-0x7b64(asmTemp)
0x000a57b8 lui asmTemp,0x8014
0x000a57bc lh v0,-0x7b5e(asmTemp)
0x000a57c0 nop
0x000a57c4 slti asmTemp,v0,0x0064
0x000a57c8 bne asmTemp,r0,0x000a57dc
0x000a57cc nop
0x000a57d0 addiu v0,r0,0x0063
0x000a57d4 lui asmTemp,0x8014
0x000a57d8 sh v0,-0x7b5e(asmTemp)
0x000a57dc lui asmTemp,0x8014
0x000a57e0 lh v0,-0x7b5e(asmTemp)
0x000a57e4 nop
0x000a57e8 bgtz v0,0x000a57fc
0x000a57ec nop
0x000a57f0 addiu v0,r0,0x0001
0x000a57f4 lui asmTemp,0x8014
0x000a57f8 sh v0,-0x7b5e(asmTemp)
0x000a57fc jr ra
0x000a5800 nop