int fillRect(headerPtr, color) {
  gpuStatPtr = load(0x116C10) // 0x1F801814
    
  width = load(headerPtr + 0x04)
  height = load(headerPtr + 0x06)
  
  xSize = load(0x116C58) - 1
  ySize = load(0x116C5A) - 1
  
  if(width >= 0 && xSize >= width)
    xSize = width
  else
    xSize = 0
  
  if(height >= 0 && ySize >= height)
    ySize = height
  else
    ySize = 0
  
  store(headerPtr + 0x04, xSize)
  store(headerPtr + 0x06, ySize)
  
  texPage = load(gpuStatPtr) & 0x07FF
  texDisabled = (color >> 0x1F) << 0x0A
  
  if(load(headerPtr) & 0x3F != 0 || load(headerPtr + 0x04) & 0x3F != 0) {
    store(0x135464, 0x0813548C) // unknown, some ptr to list at 0x13548C?
    store(0x135464 + 0x04, 0xE3000000) // set drawing area top left 0,0,0
    store(0x135464 + 0x08, 0xE4FFFFFF) // set drawing area bottom right -1,-1,-1
    store(0x135464 + 0x0C, 0xE5000000) // set drawing offset 0,0,0
    store(0x135464 + 0x10, 0xE6000000) // set mask bit setting TextureBit15, DrawAlways
    store(0x135464 + 0x14, 0xE1000000 | texDisabled | texPage) // draw mode
    store(0x135464 + 0x18, 0x60000000 | (color & 0x00FFFFFF)) // draw monochrome rectangle
    store(0x135464 + 0x1C, load(headerPtr)) // rectangle vertex position
    store(0x135464 + 0x20, load(headerPtr + 0x04)) // rectangle size
    
    store(0x13548C, 0x03FFFFFF) // unknown, null pointer?
    store(0x13548C + 0x04, 0xE3000000 | getGPUInfo(3)) // draw area top left
    store(0x13548C + 0x08, 0xE4000000 | getGPUInfo(4)) // draw area bottom right
    store(0x13548C + 0x0C, 0xE5000000 | getGPUInfo(5)) // draw area offset
  }
  else {
    store(0x135464, 0x05FFFFFF) // unknown, null pointer?
    store(0x135464 + 0x04, 0xE6000000)  // set mask bit setting TextureBit15, DrawAlways
    store(0x135464 + 0x08, 0xE1000000 | texDisabled | texPage) // draw mode
    store(0x135464 + 0x0C, 0x02000000 | (color & 0x00FFFFFF)) // fill rectangle in VRAM
    store(0x135464 + 0x10, load(headerPtr)) // top left corner
    store(0x135464 + 0x14, load(headerPtr + 0x04)) // size
  }
  
  gpuUploadCommandList(0x135464)
  return 0
}

0x0009332c addiu sp,sp,0xffe0
0x00093330 addu t0,a0,r0
0x00093334 sw ra,0x001c(sp)
0x00093338 sw s2,0x0018(sp)
0x0009333c sw s1,0x0014(sp)
0x00093340 sw s0,0x0010(sp)
0x00093344 lh v1,0x0004(t0)
0x00093348 lhu a0,0x0004(t0)
0x0009334c bltz v1,0x00093380
0x00093350 addu t1,a1,r0
0x00093354 lui v0,0x8011
0x00093358 lh v0,0x6c58(v0)
0x0009335c nop
0x00093360 addiu v0,v0,0xffff
0x00093364 slt v0,v0,v1
0x00093368 lui v1,0x8011
0x0009336c lhu v1,0x6c58(v1)
0x00093370 bne v0,r0,0x00093384
0x00093374 addiu v0,v1,0xffff
0x00093378 j 0x00093384
0x0009337c addu v0,a0,r0
0x00093380 addu v0,r0,r0
0x00093384 lh v1,0x0006(t0)
0x00093388 lhu a0,0x0006(t0)
0x0009338c bltz v1,0x000933c0
0x00093390 sh v0,0x0004(t0)
0x00093394 lui v0,0x8011
0x00093398 lh v0,0x6c5a(v0)
0x0009339c nop
0x000933a0 addiu v0,v0,0xffff
0x000933a4 slt v0,v0,v1
0x000933a8 lui v1,0x8011
0x000933ac lhu v1,0x6c5a(v1)
0x000933b0 bne v0,r0,0x000933c4
0x000933b4 addiu v1,v1,0xffff
0x000933b8 j 0x000933c4
0x000933bc addu v1,a0,r0
0x000933c0 addu v1,r0,r0
0x000933c4 lhu v0,0x0000(t0)
0x000933c8 nop
0x000933cc andi v0,v0,0x003f
0x000933d0 bne v0,r0,0x000933ec
0x000933d4 sh v1,0x0006(t0)
0x000933d8 lhu v0,0x0004(t0)
0x000933dc nop
0x000933e0 andi v0,v0,0x003f
0x000933e4 beq v0,r0,0x000934c4
0x000933e8 lui v0,0x05ff
0x000933ec lui a2,0x00ff
0x000933f0 ori a2,a2,0xffff
0x000933f4 lui a0,0xe4ff
0x000933f8 ori a0,a0,0xffff
0x000933fc lui a3,0x03ff
0x00093400 lui a1,0x8013
0x00093404 addiu a1,a1,0x5464
0x00093408 lui s0,0x8013
0x0009340c addiu s0,s0,0x548c
0x00093410 and v0,s0,a2
0x00093414 lui v1,0x0800
0x00093418 or v0,v0,v1
0x0009341c lui s1,0xe300
0x00093420 lui s2,0xe500
0x00093424 sw v0,0x0000(a1)
0x00093428 lui v0,0xe600
0x0009342c and a2,t1,a2
0x00093430 lui v1,0x6000
0x00093434 or a2,a2,v1
0x00093438 sw v0,0x0010(a1)
0x0009343c lui v0,0x8011
0x00093440 lw v0,0x6c10(v0)
0x00093444 lui v1,0xe100
0x00093448 sw s1,0x0004(a1)
0x0009344c sw a0,0x0008(a1)
0x00093450 sw s2,0x000c(a1)
0x00093454 lw a0,0x0000(v0)
0x00093458 srl v0,t1,0x1f
0x0009345c sll v0,v0,0x0a
0x00093460 or v0,v0,v1
0x00093464 sw a2,0x0018(a1)
0x00093468 andi a0,a0,0x07ff
0x0009346c or a0,a0,v0
0x00093470 sw a0,0x0014(a1)
0x00093474 lw v0,0x0000(t0)
0x00093478 ori a3,a3,0xffff
0x0009347c sw v0,0x001c(a1)
0x00093480 lw v0,0x0004(t0)
0x00093484 addiu a0,r0,0x0003
0x00093488 sw a3,0x0000(s0)
0x0009348c jal 0x00093ad8
0x00093490 sw v0,0x0020(a1)
0x00093494 addiu a0,r0,0x0004
0x00093498 or v0,v0,s1
0x0009349c jal 0x00093ad8
0x000934a0 sw v0,0x0004(s0)
0x000934a4 addiu a0,r0,0x0005
0x000934a8 lui v1,0xe400
0x000934ac or v0,v0,v1
0x000934b0 jal 0x00093ad8
0x000934b4 sw v0,0x0008(s0)
0x000934b8 or v0,v0,s2
0x000934bc j 0x00093534
0x000934c0 sw v0,0x000c(s0)
0x000934c4 ori v0,v0,0xffff
0x000934c8 lui v1,0x00ff
0x000934cc ori v1,v1,0xffff
0x000934d0 lui a2,0x8013
0x000934d4 addiu a2,a2,0x5464
0x000934d8 sw v0,0x0000(a2)
0x000934dc lui v0,0xe600
0x000934e0 and v1,t1,v1
0x000934e4 lui a1,0x0200
0x000934e8 sw v0,0x0004(a2)
0x000934ec lui v0,0x8011
0x000934f0 lw v0,0x6c10(v0)
0x000934f4 or v1,v1,a1
0x000934f8 lw a0,0x0000(v0)
0x000934fc srl v0,t1,0x1f
0x00093500 sll v0,v0,0x0a
0x00093504 sw v1,0x000c(a2)
0x00093508 lui v1,0xe100
0x0009350c or v0,v0,v1
0x00093510 andi a0,a0,0x07ff
0x00093514 or a0,a0,v0
0x00093518 sw a0,0x0008(a2)
0x0009351c lw v0,0x0000(t0)
0x00093520 nop
0x00093524 sw v0,0x0010(a2)
0x00093528 lw v0,0x0004(t0)
0x0009352c nop
0x00093530 sw v0,0x0014(a2)
0x00093534 lui a0,0x8013
0x00093538 jal 0x00093a90
0x0009353c addiu a0,a0,0x5464
0x00093540 addu v0,r0,r0
0x00093544 lw ra,0x001c(sp)
0x00093548 lw s2,0x0018(sp)
0x0009354c lw s1,0x0014(sp)
0x00093550 lw s0,0x0010(sp)
0x00093554 jr ra
0x00093558 addiu sp,sp,0x0020